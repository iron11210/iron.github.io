{
    "version": "https://jsonfeed.org/version/1",
    "title": "杂项笔记",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/10/03/database/lec8%20Schema%20Refinement%20and%20Normalisation/",
            "url": "http://example.com/2024/10/03/database/lec8%20Schema%20Refinement%20and%20Normalisation/",
            "title": "lec_8 Schema Refinement and Normalisation",
            "date_published": "2024-10-03T00:25:59.560Z",
            "content_html": "<h2 id=\"冗余和异常redundancy-and-anomalies\"><a class=\"anchor\" href=\"#冗余和异常redundancy-and-anomalies\">#</a> 冗余和异常（Redundancy and Anomalies）</h2>\n<h3 id=\"1-冗余的定义与问题\"><a class=\"anchor\" href=\"#1-冗余的定义与问题\">#</a> 1. <strong>冗余的定义与问题</strong></h3>\n<ul>\n<li>冗余指的是在数据库中存储重复的数据，这些数据会占用额外的存储空间并可能引发一致性问题。</li>\n<li><strong>冗余的影响</strong>：当同样的数据在多个地方存储时，如果在一个地方更新数据却忘记在其他地方同步更新，可能导致数据不一致。</li>\n</ul>\n<h3 id=\"2-异常的类型\"><a class=\"anchor\" href=\"#2-异常的类型\">#</a> 2. <strong>异常的类型</strong></h3>\n<p>冗余数据通常会引发三种主要的数据库操作异常：</p>\n<ul>\n<li><strong>更新异常（Update Anomaly）</strong>：\n<ul>\n<li>由于冗余存在，更新一个数据项时，可能需要在多个位置进行更新。如果忘记更新某些位置，数据库将进入不一致的状态。例如，某个课程的教室变更，如果没有同步更新所有相关记录，教室信息将会不一致​。</li>\n</ul>\n</li>\n<li><strong>插入异常（Insertion Anomaly）</strong>：\n<ul>\n<li>在不良设计的数据库中，某些情况下插入新数据会受到限制。例如，如果一个课程表记录包含课程、教室和学生信息，但在没有学生的情况下无法为课程分配教室，这就是插入异常​。</li>\n</ul>\n</li>\n<li><strong>删除异常（Deletion Anomaly）</strong>：\n<ul>\n<li>删除某些数据时，可能会意外删除其他有用的信息。例如，如果删除了所有选某门课的学生记录，可能会导致该课程本身的信息（如教室）也被删除，尽管课程还没有被取消​。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-解决冗余与异常的方法\"><a class=\"anchor\" href=\"#3-解决冗余与异常的方法\">#</a> 3. <strong>解决冗余与异常的方法</strong></h3>\n<ul>\n<li><strong>规范化（Normalization）</strong>：通过规范化的过程（例如将表格分解为多个更小的表），可以减少或消除冗余数据，从而避免上述异常问题。例如，通过分解表结构来消除不必要的冗余信息，将多个相关信息存储在不同的表中，并通过外键进行关联​​。</li>\n</ul>\n<hr>\n<h2 id=\"函数依赖functional-dependencies\"><a class=\"anchor\" href=\"#函数依赖functional-dependencies\">#</a> 函数依赖（Functional Dependencies）</h2>\n<h3 id=\"1-函数依赖的定义\"><a class=\"anchor\" href=\"#1-函数依赖的定义\">#</a> 1. <strong>函数依赖的定义</strong></h3>\n<ul>\n<li>\n<p><strong>非正式定义</strong>：函数依赖描述了一个属性的值如何唯一地决定另一个属性的值。例如，给定课程代码（ <code>CourseCode</code> ），就能唯一地确定课程名称（ <code>CourseName</code> ）。记作： <code>CourseCode → CourseName</code> ​​。</p>\n</li>\n<li>\n<p><strong>正式定义</strong>：如果属性集 X 的值唯一地决定了属性集 Y 的值，则称为 X 函数依赖于 Y，记作  <code>X → Y</code> 。这意味着对于每个 X 的值，Y 的值只能有一个。因此，X 到 Y 的关系是确定的，并且不会产生多对一的映射​。</p>\n</li>\n</ul>\n<h3 id=\"2-函数依赖的识别\"><a class=\"anchor\" href=\"#2-函数依赖的识别\">#</a> 2. <strong>函数依赖的识别</strong></h3>\n<ul>\n<li>\n<p><strong>通过语义推理</strong>：函数依赖通常通过属性之间的语义关系来确定。例如，在大学数据库中，学号（ <code>StudentID</code> ）可以唯一决定学生的姓名（ <code>StudentName</code> ）和年龄（ <code>StudentAge</code> ）。这个依赖关系可以通过业务规则和语义来识别​。</p>\n</li>\n<li>\n<p><strong>通过数据推理</strong>：通过实际数据，可以分析并得出函数依赖关系。例如，通过分析学生和他们的课程数据，可以推导出某些属性之间的函数依赖。然而，仅通过观察数据无法保证找到所有函数依赖，因为函数依赖必须在所有可能的数据实例中都成立​。</p>\n</li>\n</ul>\n<h3 id=\"3-函数依赖的用途\"><a class=\"anchor\" href=\"#3-函数依赖的用途\">#</a> 3. <strong>函数依赖的用途</strong></h3>\n<ul>\n<li>\n<p><strong>检测冗余</strong>：函数依赖在检测数据库中的冗余时非常有用。通过识别哪些属性可以由其他属性唯一确定，我们可以识别冗余信息，并且通过规范化过程消除这些冗余​​。</p>\n</li>\n<li>\n<p><strong>规范化</strong>：函数依赖是数据库规范化的重要基础。通过函数依赖，可以将表格分解为符合第一范式（1NF）、第二范式（2NF）、第三范式（3NF）或 Boyce-Codd 范式（BCNF）的子表，从而避免冗余和异常。例如，如果我们知道  <code>CourseCode → CourseName</code> ，则可以将课程代码和课程名称存储在一个单独的表中，而不在学生记录中重复存储​。</p>\n</li>\n</ul>\n<h3 id=\"4-函数依赖的示例\"><a class=\"anchor\" href=\"#4-函数依赖的示例\">#</a> 4. <strong>函数依赖的示例</strong></h3>\n<ul>\n<li><strong>实例 1</strong>：在一个银行系统中，分支名称（ <code>BranchName</code> ）可以唯一确定所在城市（ <code>City</code> ）。即  <code>BranchName → City</code> 。这表明，对于每个分支，其城市信息是唯一确定的​。</li>\n<li><strong>实例 2</strong>：在一个课程数据库中，课程代码（ <code>CourseCode</code> ）可以唯一确定课程名称和学分，即  <code>CourseCode → &#123;CourseName, Credits&#125;</code> 。通过这一依赖关系，可以消除冗余并确保数据一致性​。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h3>\n<p><strong>函数依赖</strong>用于描述数据库中属性之间的确定性关系，它是规范化过程的基础。通过函数依赖，可以识别冗余并消除异常，从而优化数据库设计，确保数据一致性和完整性。</p>\n<hr>\n<h2 id=\"范式normal-forms\"><a class=\"anchor\" href=\"#范式normal-forms\">#</a> 范式（Normal Forms）</h2>\n<h3 id=\"1-范式的定义\"><a class=\"anchor\" href=\"#1-范式的定义\">#</a> 1. <strong>范式的定义</strong></h3>\n<ul>\n<li><strong>范式</strong>是数据库设计中用于评估和改进关系模式的标准，规范化的目标是减少数据冗余和避免更新、插入、删除异常。</li>\n</ul>\n<h3 id=\"2-第一范式-1nf\"><a class=\"anchor\" href=\"#2-第一范式-1nf\">#</a> 2. <strong>第一范式 (1NF)</strong>：</h3>\n<ul>\n<li><strong>要求</strong>：所有属性的值必须是<strong>原子</strong>的，即每个字段都不能包含多个值或集合值。每一个关系都必须符合 1NF。</li>\n<li><strong>示例</strong>：假设有一个学生表，学生的电话存储在一个字段中作为一个列表，这违反了 1NF。为了符合 1NF，应该将电话拆分成多个独立的记录​。</li>\n</ul>\n<h3 id=\"3-第二范式-2nf\"><a class=\"anchor\" href=\"#3-第二范式-2nf\">#</a> 3. <strong>第二范式 (2NF)</strong>：</h3>\n<ul>\n<li><strong>要求</strong>：在满足 1NF 的基础上，消除<strong>部分依赖</strong>。即任何非主属性都不应依赖于复合主键的一部分（适用于有复合主键的情况）。</li>\n<li><strong>解释</strong>：如果一个表的主键是由多个属性组成的，则表中的非主属性应该完全依赖于主键的所有部分，而不是其中的一部分。</li>\n<li><strong>示例</strong>：如果我们有一个表，主键是 <code>&#123;CourseCode, StudentID&#125;</code> ，而课程名称只依赖于 <code>CourseCode</code> ，那么这是部分依赖，需要将课程信息拆分到单独的表中​。</li>\n</ul>\n<h3 id=\"4-第三范式-3nf\"><a class=\"anchor\" href=\"#4-第三范式-3nf\">#</a> 4. <strong>第三范式 (3NF)</strong>：</h3>\n<ul>\n<li><strong>要求</strong>：在满足 2NF 的基础上，消除<strong>传递依赖</strong>。即非主属性不能依赖于另一个非主属性。</li>\n<li><strong>解释</strong>：如果属性 A 依赖于主键，属性 B 又依赖于属性 A，那么 B 传递依赖于主键，这是需要避免的。</li>\n<li><strong>示例</strong>：在一个学生表中，如果 <code>StudentID → DepartmentID</code>  且 <code>DepartmentID → DepartmentName</code> ，那么 <code>StudentID</code>  传递地依赖于 <code>DepartmentName</code> ，应将部门信息拆分到单独的表中​​。</li>\n</ul>\n<h3 id=\"5-bcnf-boyce-codd范式\"><a class=\"anchor\" href=\"#5-bcnf-boyce-codd范式\">#</a> 5. <strong>BCNF (Boyce-Codd 范式)</strong>：</h3>\n<ul>\n<li><strong>要求</strong>：BCNF 是 3NF 的加强版。对于每一个非平凡的函数依赖关系  <code>X → Y</code> ，X 必须是候选键。</li>\n<li><strong>解释</strong>：BCNF 进一步消除了复杂的依赖关系。它的核心要求是确保所有决定其他属性的属性集必须是候选键的一部分。</li>\n<li><strong>示例</strong>：假设一个表的候选键是 <code>&#123;A, B&#125;</code> ，但存在 <code>C → A</code>  的依赖关系，且 C 不是候选键，这违反了 BCNF，因此需要对表进行进一步分解​​。</li>\n</ul>\n<h3 id=\"6-多值依赖与第四范式-4nf\"><a class=\"anchor\" href=\"#6-多值依赖与第四范式-4nf\">#</a> 6. <strong>多值依赖与第四范式 (4NF)</strong>：</h3>\n<ul>\n<li><strong>要求</strong>：在满足 BCNF 的基础上，消除<strong>多值依赖</strong>。即在表中，如果某个属性组独立地依赖于主键的不同部分，应该将其分解。</li>\n<li><strong>解释</strong>：多值依赖的情况是，某个属性可以有多个独立的值，与主键无关。4NF 要求消除这些多值依赖的关系。</li>\n<li><strong>示例</strong>：在一个学生表中，学生可能同时拥有多个电话号码和多个地址，这种情况会导致多值依赖，因此需要将电话号码和地址分成不同的表​。</li>\n</ul>\n<h3 id=\"7-范式化的过程\"><a class=\"anchor\" href=\"#7-范式化的过程\">#</a> 7. <strong>范式化的过程</strong></h3>\n<ul>\n<li>通过识别和消除函数依赖、部分依赖、传递依赖以及多值依赖，将数据库模式分解为更小、更规范的表结构，从而消除冗余并避免异常​。</li>\n<li>该过程通常包括从 1NF 开始，逐步检查是否满足 2NF、3NF、BCNF 和 4NF，通过不断地分解关系来优化设计。</li>\n</ul>\n<h2 id=\"多值依赖和第四范式multivalued-dependencies-and-4nf\"><a class=\"anchor\" href=\"#多值依赖和第四范式multivalued-dependencies-and-4nf\">#</a> 多值依赖和第四范式（Multivalued dependencies and 4NF）</h2>\n<h3 id=\"1-多值依赖multivalued-dependency-mvd\"><a class=\"anchor\" href=\"#1-多值依赖multivalued-dependency-mvd\">#</a> 1. <strong>多值依赖（Multivalued Dependency, MVD）</strong></h3>\n<ul>\n<li><strong>定义</strong>：多值依赖是指在某个关系中，如果属性集 Y 和属性集 Z 都依赖于属性集 X，但 Y 和 Z 之间彼此独立，则称 Y 和 Z 对 X 存在多值依赖，记作： <code>X ↠ Y</code> 。</li>\n<li><strong>解释</strong>：多值依赖通常发生在一种情况下，某个属性集与主键没有直接关联，但与主键的不同部分独立关联。例如，学生可能有多个电话号码和多个邮箱地址，但这两者之间是相互独立的，并且都依赖于学生的 ID​。</li>\n</ul>\n<h3 id=\"2-第四范式4nf\"><a class=\"anchor\" href=\"#2-第四范式4nf\">#</a> 2. <strong>第四范式（4NF）</strong></h3>\n<ul>\n<li><strong>要求</strong>：在满足 BCNF 的基础上，第四范式要求消除多值依赖。即一个表不能同时有两个或多个独立于其他属性的多值依赖关系。换句话说，如果存在多值依赖  <code>X ↠ Y</code> ，则 X 必须是候选键。</li>\n<li><strong>解释</strong>：如果一个关系中有多值依赖（即一个属性集可以有多个独立的值），那么这个关系就违反了 4NF。为了达到 4NF，必须将具有多值依赖的属性分解为多个关系。</li>\n<li><strong>目标</strong>：通过消除多值依赖，可以减少数据冗余，避免更新、插入和删除时产生的异常。</li>\n</ul>\n<h3 id=\"3-多值依赖的示例\"><a class=\"anchor\" href=\"#3-多值依赖的示例\">#</a> 3. <strong>多值依赖的示例</strong></h3>\n<ul>\n<li><strong>示例</strong>：假设有一个学生表，存储学生的姓名、电话号码和邮箱地址。一个学生可能有多个电话号码和多个邮箱地址，而电话号码和邮箱地址是彼此独立的。这种情况下，存在多值依赖，因为电话号码和邮箱地址独立于彼此，只是都依赖于学生 ID：\n<ul>\n<li><code>StudentID ↠ PhoneNumber</code></li>\n<li><code>StudentID ↠ EmailAddress</code></li>\n</ul>\n</li>\n</ul>\n<p>为了将表规范化到 4NF，我们需要将电话号码和邮箱地址分成两个独立的关系表，一个表存储学生与电话号码的关系，另一个表存储学生与邮箱地址的关系。这可以避免存储冗余数据并确保数据一致性​。</p>\n<h3 id=\"4-消除多值依赖的步骤\"><a class=\"anchor\" href=\"#4-消除多值依赖的步骤\">#</a> 4. <strong>消除多值依赖的步骤</strong></h3>\n<ul>\n<li><strong>分解关系</strong>：如果一个关系中存在多值依赖，那么可以将其分解为两个或多个关系，以消除这些依赖。例如，将学生与电话号码的关系和学生与邮箱地址的关系分别存储在不同的表中。</li>\n<li><strong>确保无损分解</strong>：在进行分解时，必须确保分解后的关系能够通过自然连接（natural join）重新组合成原始的关系，且不丢失任何信息，这称为无损分解​。</li>\n</ul>\n<h2 id=\"模式分解\"><a class=\"anchor\" href=\"#模式分解\">#</a> 模式分解</h2>\n<h3 id=\"1-模式分解的目的\"><a class=\"anchor\" href=\"#1-模式分解的目的\">#</a> 1. <strong>模式分解的目的</strong></h3>\n<ul>\n<li><strong>减少冗余</strong>：模式分解的主要目的是通过将一个大表拆分为多个更小的表，减少数据冗余。</li>\n<li><strong>避免异常</strong>：分解关系可以避免更新、插入和删除时产生的异常（如更新异常、插入异常和删除异常），从而确保数据的一致性和完整性​​。</li>\n<li><strong>保持依赖</strong>：分解过程中，要确保分解后的关系仍然保持原来的函数依赖，确保不丢失任何业务规则。</li>\n</ul>\n<h3 id=\"2-无损分解lossless-decomposition\"><a class=\"anchor\" href=\"#2-无损分解lossless-decomposition\">#</a> 2. <strong>无损分解（Lossless Decomposition）</strong></h3>\n<ul>\n<li><strong>定义</strong>：无损分解是指将一个关系分解为多个子关系后，通过这些子关系的自然连接操作（natural join）能够重新得到原始关系而不丢失信息。</li>\n<li><strong>目标</strong>：无损分解是模式分解的关键目标之一，确保我们在分解表时不会丢失数据或者引入错误的数据​。</li>\n<li><strong>示例</strong>：如果我们有一个关系  <code>R(A, B, C)</code> ，并且满足  <code>A → B</code> ，我们可以将关系分解为两个子关系  <code>R1(A, B)</code>  和  <code>R2(A, C)</code> 。此时，通过  <code>R1</code>  和  <code>R2</code>  的自然连接可以无损地还原原始关系​。</li>\n</ul>\n<h3 id=\"3-保持依赖的分解dependency-preserving-decomposition\"><a class=\"anchor\" href=\"#3-保持依赖的分解dependency-preserving-decomposition\">#</a> 3. <strong>保持依赖的分解（Dependency-Preserving Decomposition）</strong></h3>\n<ul>\n<li><strong>定义</strong>：保持依赖的分解是指，在分解一个关系时，分解后的所有子关系依然保留了原始关系中的所有函数依赖。</li>\n<li><strong>目标</strong>：在保持依赖的分解中，确保所有原始的业务规则（函数依赖）仍然适用于分解后的关系。如果某些依赖关系在分解后的子关系中无法体现，那么我们可能需要添加额外的机制（如触发器或检查约束）来保证这些依赖​​。</li>\n<li><strong>示例</strong>：如果我们有一个关系  <code>R(A, B, C)</code>  且函数依赖为  <code>A → B</code>  和  <code>B → C</code> ，我们可以将关系分解为  <code>R1(A, B)</code>  和  <code>R2(B, C)</code> ，此时这两个子关系分别保留了  <code>A → B</code>  和  <code>B → C</code>  依赖​。</li>\n</ul>\n<h3 id=\"4-分解为bcnf\"><a class=\"anchor\" href=\"#4-分解为bcnf\">#</a> 4. <strong>分解为 BCNF</strong></h3>\n<ul>\n<li><strong>BCNF 分解</strong>：如果一个关系不符合 Boyce-Codd 范式（BCNF），我们可以通过分解它使其符合 BCNF。分解的过程通常包括以下步骤：\n<ul>\n<li>找到违反 BCNF 的依赖关系。</li>\n<li>根据依赖关系，将关系分解为两个子关系，一个子关系包含所有违反依赖的属性，另一个子关系包含剩余的属性。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：如果我们有一个关系  <code>R(A, B, C)</code> ，且  <code>A → B</code> ，但  <code>B → C</code> （且 B 不是候选键），我们可以将关系分解为  <code>R1(B, C)</code>  和  <code>R2(A, B)</code> ，确保每个子关系都符合 BCNF​。</li>\n</ul>\n<h3 id=\"5-分解为4nf\"><a class=\"anchor\" href=\"#5-分解为4nf\">#</a> 5. <strong>分解为 4NF</strong></h3>\n<ul>\n<li><strong>4NF 分解</strong>：如果一个关系中存在多值依赖且不符合第四范式（4NF），我们可以通过分解关系来消除多值依赖。具体步骤与 BCNF 分解类似，但重点是消除多值依赖​。</li>\n</ul>\n<h3 id=\"6-分解过程的注意事项\"><a class=\"anchor\" href=\"#6-分解过程的注意事项\">#</a> 6. <strong>分解过程的注意事项</strong></h3>\n<ul>\n<li>在分解过程中，必须确保两点：\n<ol>\n<li><strong>无损连接</strong>：分解后的关系在自然连接时，能够无损还原原始关系。</li>\n<li><strong>保持依赖</strong>：分解后的关系必须保留原始的所有函数依赖，以确保数据库的完整性和业务规则的正确性​。</li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "http://example.com/2024/09/30/database/lec7%20python%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "http://example.com/2024/09/30/database/lec7%20python%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "lec_7 Python连接数据库",
            "date_published": "2024-09-30T06:12:43.865Z",
            "content_html": "<h2 id=\"1使用python连接数据库并进行操作\"><a class=\"anchor\" href=\"#1使用python连接数据库并进行操作\">#</a> 1. 使用 python 连接数据库并进行操作</h2>\n<ol>\n<li>cursor 的基本使用<br>\n <figure class=\"highlight python\"><figcaption><span>行高亮</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1. 创建cursor</span></span><br><span class=\"line\">cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2. 执行sql语句</span></span><br><span class=\"line\">cursor.execute(sql_query, parameters)</span><br><span class=\"line\"><span class=\"comment\">#示例 解释：此查询将返回 `HR` 部门的所有员工。`%s` 是占位符，第二个参数提供了实际的值，防止 SQL 注入。</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&quot;SELECT * FROM Employees WHERE department = %s;&quot;</span>, (<span class=\"string\">&#x27;HR&#x27;</span>,))</span><br><span class=\"line\"><span class=\"comment\">#在执行 `SELECT` 查询后，`Cursor` 提供了多种方法来获取结果集中的数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.查询执行结果</span></span><br><span class=\"line\"><span class=\"comment\">#fetchone()</span></span><br><span class=\"line\"><span class=\"comment\">#获取查询结果的下一行，返回一个元组。如果没有更多行，返回 `None`。</span></span><br><span class=\"line\">row = cursor.fetchone()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(row)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#fetchall() 获取查询结果的所有行，返回一个包含多个元组的列表。</span></span><br><span class=\"line\">rows = cursor.fetchall()</span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> rows:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(row)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#fetchmany(size) 获取指定数量的行（`size` 是行的数量），返回一个包含多个元组的列表。</span></span><br><span class=\"line\">rows = cursor.fetchmany(<span class=\"number\">5</span>)  <span class=\"comment\"># 获取5行数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.迭代 Cursor 可以将 `Cursor` 作为迭代器来逐行遍历结果集。</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&quot;SELECT * FROM Employees;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cursor:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(row)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5. executemany() 方法用于执行多条 SQL 语句，通常是 `INSERT` 或 `UPDATE`。它会将同一条 SQL 语句应用于一组参数集合。</span></span><br><span class=\"line\">query = <span class=\"string\">&quot;INSERT INTO Employees (employee_id, name, department, salary) VALUES (%s, %s, %s, %s)&quot;</span></span><br><span class=\"line\">data = [</span><br><span class=\"line\">    (<span class=\"number\">6</span>, <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;HR&#x27;</span>, <span class=\"number\">60000</span>),</span><br><span class=\"line\">    (<span class=\"number\">7</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Engineering&#x27;</span>, <span class=\"number\">75000</span>),</span><br><span class=\"line\">    (<span class=\"number\">8</span>, <span class=\"string\">&#x27;Charlie&#x27;</span>, <span class=\"string\">&#x27;Marketing&#x27;</span>, <span class=\"number\">50000</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\">cursor.executemany(query, data)</span><br><span class=\"line\">connection.commit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#6. 事务控制</span></span><br><span class=\"line\"><span class=\"comment\">#当执行插入、更新或删除操作时，必须调用 `commit()` 方法来提交事务，使更改生效。</span></span><br><span class=\"line\">connection.commit()</span><br><span class=\"line\"><span class=\"comment\">#如果在执行 SQL 语句期间发生错误，可以调用 `rollback()` 方法撤销更改，回滚到事务开始前的状态。</span></span><br><span class=\"line\">connection.rollback()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#7.关闭 Cursor</span></span><br><span class=\"line\"><span class=\"comment\">#在完成对数据库的操作后，应该关闭 `Cursor` 以释放资源。</span></span><br><span class=\"line\">cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#8.获取查询状态</span></span><br><span class=\"line\"><span class=\"comment\">#rowcount：返回由最近的 `execute()` 操作影响的行数（例如 `INSERT`、`UPDATE`、`DELETE`）</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&quot;UPDATE Employees SET salary = salary + 5000 WHERE department = &#x27;HR&#x27;;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cursor.rowcount, <span class=\"string\">&quot;rows affected&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#`statusmessage`：返回最近一次执行操作的状态信息。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cursor.statusmessage)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#9.游标的移动和控制</span></span><br><span class=\"line\"><span class=\"comment\">#`scroll()`：允许你在结果集内移动游标。例如，可以向前或向后移动指定的行数。</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&quot;SELECT * FROM Employees;&quot;</span>)</span><br><span class=\"line\">cursor.scroll(<span class=\"number\">2</span>)  <span class=\"comment\"># 游标前进2行</span></span><br><span class=\"line\">row = cursor.fetchone()  <span class=\"comment\"># 获取游标所在行的数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(row)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#`description`：返回结果集中每一列的元数据，如列名等。</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&quot;SELECT * FROM Employees;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> cursor.description:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(col.name)</span><br></pre></td></tr></table></figure></li>\n<li>常用语句总结</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>execute(sql, params)</code></td>\n<td>执行单条 SQL 语句。</td>\n</tr>\n<tr>\n<td><code>executemany(sql, data)</code></td>\n<td>执行多条 SQL 语句（批量插入或更新）。</td>\n</tr>\n<tr>\n<td><code>fetchone()</code></td>\n<td>获取查询结果的下一行。</td>\n</tr>\n<tr>\n<td><code>fetchall()</code></td>\n<td>获取查询结果的所有行。</td>\n</tr>\n<tr>\n<td><code>fetchmany(size)</code></td>\n<td>获取指定数量的行。</td>\n</tr>\n<tr>\n<td><code>scroll(value)</code></td>\n<td>在结果集中移动游标。</td>\n</tr>\n<tr>\n<td><code>commit()</code></td>\n<td>提交当前事务。</td>\n</tr>\n<tr>\n<td><code>rollback()</code></td>\n<td>回滚当前事务。</td>\n</tr>\n<tr>\n<td><code>close()</code></td>\n<td>关闭游标，释放资源。</td>\n</tr>\n<tr>\n<td><code>rowcount</code></td>\n<td>获取最近一次操作影响的行数。</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td>获取查询的元数据（列名、数据类型等）。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>连接示例</li>\n</ol>\n<p><figure class=\"highlight python\"><figcaption><span>raw</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> psycopg2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据库连接参数</span></span><br><span class=\"line\">DB_HOST = <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">DB_NAME = <span class=\"string\">&quot;your_database&quot;</span></span><br><span class=\"line\">DB_USER = <span class=\"string\">&quot;your_username&quot;</span></span><br><span class=\"line\">DB_PASS = <span class=\"string\">&quot;your_password&quot;</span></span><br><span class=\"line\">DB_PORT = <span class=\"string\">&quot;5432&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 1. 连接到 PostgreSQL 数据库</span></span><br><span class=\"line\">    connection = psycopg2.connect(</span><br><span class=\"line\">        host=DB_HOST,</span><br><span class=\"line\">        database=DB_NAME,</span><br><span class=\"line\">        user=DB_USER,</span><br><span class=\"line\">        password=DB_PASS,</span><br><span class=\"line\">        port=DB_PORT</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 2. 创建一个游标对象</span></span><br><span class=\"line\">    cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3. 执行 SQL 查询</span></span><br><span class=\"line\">    cursor.execute(<span class=\"string\">&quot;SELECT version();&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4. 获取查询结果</span></span><br><span class=\"line\">    db_version = cursor.fetchone()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;PostgreSQL 版本: <span class=\"subst\">&#123;db_version&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 5. 插入数据的示例</span></span><br><span class=\"line\">    cursor.execute(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        INSERT INTO Employees (employee_id, name, department, salary, hire_date, city, age)</span></span><br><span class=\"line\"><span class=\"string\">        VALUES (6, &#x27;John Doe&#x27;, &#x27;Sales&#x27;, 45000, &#x27;2022-09-15&#x27;, &#x27;Boston&#x27;, 29);</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 提交事务</span></span><br><span class=\"line\">    connection.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 6. 执行查询来检查插入结果</span></span><br><span class=\"line\">    cursor.execute(<span class=\"string\">&quot;SELECT * FROM Employees WHERE employee_id = 6;&quot;</span>)</span><br><span class=\"line\">    new_employee = cursor.fetchone()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;新员工数据: <span class=\"subst\">&#123;new_employee&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> error:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;数据库操作出现错误: <span class=\"subst\">&#123;error&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 7. 关闭游标和连接</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cursor:</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> connection:</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用建议\"><a class=\"anchor\" href=\"#使用建议\">#</a> 使用建议</h3>\n<ul>\n<li><strong>关闭游标和连接</strong>：无论是否发生异常，在操作结束时都应关闭游标和连接，确保资源得到释放。</li>\n<li><strong>事务控制</strong>：使用  <code>commit()</code>  提交数据，使用  <code>rollback()</code>  进行回滚，确保数据一致性。</li>\n<li><strong>安全性</strong>：始终使用参数化查询防止 SQL 注入。</li>\n</ul>\n<p><code>Cursor</code>  是在 Python 中与数据库交互的核心工具，掌握其操作有助于编写高效、健壮的数据库应用程序。</p>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "http://example.com/2024/09/29/database/lec_6%20Advanced%20SQL/",
            "url": "http://example.com/2024/09/29/database/lec_6%20Advanced%20SQL/",
            "title": "lec_6 Advanced SQL",
            "date_published": "2024-09-29T06:55:39.579Z",
            "content_html": "<h2 id=\"嵌套查询nested-queries\"><a class=\"anchor\" href=\"#嵌套查询nested-queries\">#</a> 嵌套查询（Nested Queries）</h2>\n<h3 id=\"1-嵌套查询的定义\"><a class=\"anchor\" href=\"#1-嵌套查询的定义\">#</a> 1. <strong>嵌套查询的定义</strong></h3>\n<p>嵌套查询是指在一个 SQL 查询的  <code>WHERE</code> 、 <code>FROM</code> 、或  <code>SELECT</code>  子句中嵌套另一个查询（子查询）。子查询先执行，其结果用于主查询。嵌套查询常用于需要多步过滤、动态生成条件或复杂的数据处理的场景。</p>\n<h3 id=\"2-嵌套查询的类型\"><a class=\"anchor\" href=\"#2-嵌套查询的类型\">#</a> 2. <strong>嵌套查询的类型</strong></h3>\n<p>嵌套查询可以根据使用位置分为几种类型：</p>\n<h4 id=\"1-where-子句中的子查询\"><a class=\"anchor\" href=\"#1-where-子句中的子查询\">#</a> <strong>(1)  <code>WHERE</code>  子句中的子查询</strong></h4>\n<p>这种子查询返回单个值或一组值，主查询会根据这些返回的结果进行过滤。</p>\n<ul>\n<li><strong>示例</strong>：</li>\n</ul>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Students</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> student_id <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> student_id</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Enrollments</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> course_code <span class=\"operator\">=</span> <span class=\"string\">&#x27;COMP1234&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>解释</strong>：此查询查找所有选修了  <code>COMP1234</code>  课程的学生姓名。子查询返回所有注册该课程的学生 ID，主查询根据这些 ID 过滤学生表。</li>\n</ul>\n<h4 id=\"2-from-子句中的子查询\"><a class=\"anchor\" href=\"#2-from-子句中的子查询\">#</a> <strong>(2)  <code>FROM</code>  子句中的子查询</strong></h4>\n<p>子查询可以作为临时表使用。主查询可以基于这个临时表进行查询。</p>\n<ul>\n<li><strong>示例</strong>：</li>\n</ul>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">AVG</span>(total_marks)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(marks) <span class=\"keyword\">AS</span> total_marks</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Grades</span><br><span class=\"line\">    <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> student_id</span><br><span class=\"line\">) <span class=\"keyword\">AS</span> StudentTotals;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>解释</strong>：子查询计算每个学生的总分数，然后主查询计算所有学生总分数的平均值。子查询作为临时表  <code>StudentTotals</code>  使用。</li>\n</ul>\n<h4 id=\"3-select-子句中的子查询\"><a class=\"anchor\" href=\"#3-select-子句中的子查询\">#</a> <strong>(3)  <code>SELECT</code>  子句中的子查询</strong></h4>\n<p>在  <code>SELECT</code>  子句中，子查询会为主查询的每一行执行一次，用于动态生成列值。</p>\n<ul>\n<li><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name, </span><br><span class=\"line\">       (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) </span><br><span class=\"line\">        <span class=\"keyword\">FROM</span> Enrollments </span><br><span class=\"line\">        <span class=\"keyword\">WHERE</span> Enrollments.student_id <span class=\"operator\">=</span> Students.student_id) <span class=\"keyword\">AS</span> num_courses</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Students;</span><br></pre></td></tr></table></figure></li>\n<li><strong>解释</strong>：此查询返回每个学生的名字以及他们注册的课程数量。子查询为每个学生执行一次。</li>\n</ul>\n<h3 id=\"3-相关子查询correlated-subqueries\"><a class=\"anchor\" href=\"#3-相关子查询correlated-subqueries\">#</a> 3. <strong>相关子查询（Correlated Subqueries）</strong></h3>\n<p>相关子查询是一种特殊的嵌套查询，它依赖于外部查询中的每一行，因此每次执行都会使用主查询的当前行的值。与普通子查询不同，相关子查询不能独立执行。</p>\n<ul>\n<li><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Students S</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> Enrollments E</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> E.student_id <span class=\"operator\">=</span> S.student_id</span><br><span class=\"line\">    <span class=\"keyword\">AND</span> E.course_code <span class=\"operator\">=</span> <span class=\"string\">&#x27;COMP1234&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><strong>解释</strong>：对于每个学生  <code>S</code> ，子查询检查该学生是否注册了  <code>COMP1234</code>  课程。子查询依赖于主查询的当前学生行。</li>\n</ul>\n<h3 id=\"4-子查询与运算符\"><a class=\"anchor\" href=\"#4-子查询与运算符\">#</a> 4. <strong>子查询与运算符</strong></h3>\n<p>子查询可以与多种运算符结合使用，常见的运算符有：</p>\n<ul>\n<li><strong> <code>IN</code> </strong>：用于检查一个值是否在子查询的结果集内。\n<ul>\n<li><strong>示例</strong>： <code>WHERE column_name IN (SELECT ...)</code></li>\n</ul>\n</li>\n<li><strong> <code>EXISTS</code> </strong>：用于检查子查询是否返回任何行。\n<ul>\n<li><strong>示例</strong>： <code>WHERE EXISTS (SELECT ...)</code></li>\n</ul>\n</li>\n<li><strong> <code>ANY</code>  和  <code>ALL</code> </strong>：用于与比较运算符结合使用，判断某值是否与子查询结果集中的任意值或所有值进行比较。\n<ul>\n<li><strong>示例</strong>： <code>WHERE column_name &gt; ANY (SELECT ...)</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-嵌套查询的性能\"><a class=\"anchor\" href=\"#5-嵌套查询的性能\">#</a> 5. <strong>嵌套查询的性能</strong></h3>\n<p>虽然嵌套查询在处理复杂逻辑时非常强大，但它们可能会对性能产生影响，特别是当子查询涉及大量数据时。因此，在某些情况下，可以将嵌套查询重构为 <code>JOIN</code>  操作以提高性能。</p>\n<ul>\n<li><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> S.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Students S</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> Enrollments E <span class=\"keyword\">ON</span> S.student_id <span class=\"operator\">=</span> E.student_id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> E.course_code <span class=\"operator\">=</span> <span class=\"string\">&#x27;COMP1234&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>这种 <code>JOIN</code>  查询有时可以替代子查询，提高查询效率，特别是在数据量较大时。</li>\n</ul>\n<h3 id=\"6-嵌套查询的用途\"><a class=\"anchor\" href=\"#6-嵌套查询的用途\">#</a> 6. <strong>嵌套查询的用途</strong></h3>\n<p>嵌套查询非常适合用于以下场景：</p>\n<ul>\n<li>需要多层过滤条件。</li>\n<li>需要根据另一张表动态生成数据。</li>\n<li>需要在查询中嵌入复杂的逻辑判断。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>嵌套查询提供了强大的数据处理能力，允许你在查询中使用其他查询的结果进行过滤、计算或动态生成数据。Lecture 6 详细讲解了如何利用嵌套查询处理复杂的业务需求，以及如何通过 <code>IN</code> 、 <code>EXISTS</code> 、 <code>JOIN</code>  等技术优化查询性能。</p>\n<hr>\n<h2 id=\"视图views\"><a class=\"anchor\" href=\"#视图views\">#</a> 视图（Views）</h2>\n<h3 id=\"1-什么是视图\"><a class=\"anchor\" href=\"#1-什么是视图\">#</a> 1. 什么是视图？</h3>\n<ul>\n<li><strong>视图</strong> 是基于 SQL 查询结果生成的 <strong>虚拟表</strong>。视图本身不存储实际数据，它保存的是一个 SQL 查询定义。每当访问视图时，数据库会执行该查询并返回结果。</li>\n<li>视图用于简化复杂查询、提升数据安全性、以及为数据提供抽象层。</li>\n</ul>\n<h3 id=\"2-创建视图\"><a class=\"anchor\" href=\"#2-创建视图\">#</a> 2. 创建视图</h3>\n<ul>\n<li>视图使用  <code>CREATE VIEW</code>  语句创建。创建视图时，定义的查询可以像表一样使用。</li>\n<li><strong>语法</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> view_name <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure><br>\n<strong> 示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> high_salary_employees <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> employee_id, name, salary</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> <span class=\"number\">50000</span>;</span><br></pre></td></tr></table></figure></li>\n<li>这个视图筛选出所有工资超过 50,000 的员工信息。</li>\n</ul>\n<h3 id=\"3-使用视图\"><a class=\"anchor\" href=\"#3-使用视图\">#</a> 3. 使用视图</h3>\n<ul>\n<li>视图可以像物理表一样被查询和操作。</li>\n<li><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> high_salary_employees;</span><br></pre></td></tr></table></figure></li>\n<li>这会返回所有工资超过 50,000 的员工数据。</li>\n</ul>\n<h3 id=\"4-修改视图\"><a class=\"anchor\" href=\"#4-修改视图\">#</a> 4. 修改视图</h3>\n<ul>\n<li>视图可以通过  <code>CREATE OR REPLACE VIEW</code>  语句修改，不需要先删除再创建。</li>\n<li><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">VIEW</span> high_salary_employees <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> employee_id, name, salary, department</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> <span class=\"number\">60000</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>\n 这段代码更新了视图的定义，改变了工资过滤条件并增加了一个  <code>department</code>  列。</li>\n</ul>\n<h3 id=\"5-视图的优势\"><a class=\"anchor\" href=\"#5-视图的优势\">#</a> 5. 视图的优势</h3>\n<ul>\n<li><strong>简化复杂查询</strong>：可以通过视图封装复杂查询，使其更易于复用。</li>\n<li><strong>数据安全性</strong>：可以通过视图隐藏表中的某些列，限制用户只能访问特定数据。</li>\n<li><strong>提高可读性</strong>：视图为复杂的数据处理提供了抽象层，代码更加简洁易读。</li>\n</ul>\n<h3 id=\"6-视图的局限性\"><a class=\"anchor\" href=\"#6-视图的局限性\">#</a> 6. 视图的局限性</h3>\n<ul>\n<li><strong>性能问题</strong>：视图是动态生成的，涉及复杂查询的视图可能会降低查询性能，尤其是涉及大量数据时。</li>\n<li><strong>只读视图</strong>：有些视图是只读的，不能进行  <code>INSERT</code> 、 <code>UPDATE</code>  或  <code>DELETE</code>  操作，尤其是当视图基于多表、聚合函数或  <code>DISTINCT</code>  时。</li>\n</ul>\n<h4 id=\"7-删除视图\"><a class=\"anchor\" href=\"#7-删除视图\">#</a> 7. 删除视图</h4>\n<ul>\n<li>可以使用  <code>DROP VIEW</code>  语句删除视图。</li>\n<li><strong>语法</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> view_name;   </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"8表和视图的区别\"><a class=\"anchor\" href=\"#8表和视图的区别\">#</a> 8. 表和视图的区别</h3>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>表（Table）</th>\n<th>视图（View）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>数据存储</strong></td>\n<td>实际存储数据</td>\n<td>不存储数据，基于查询的虚拟表</td>\n</tr>\n<tr>\n<td><strong>物理存储</strong></td>\n<td>有独立的存储空间</td>\n<td>没有独立的存储空间，依赖底层表</td>\n</tr>\n<tr>\n<td><strong>数据操作</strong></td>\n<td>支持  <code>INSERT</code> 、 <code>UPDATE</code> 、 <code>DELETE</code>  操作</td>\n<td>视图可能只读，有些视图可更新</td>\n</tr>\n<tr>\n<td><strong>用途</strong></td>\n<td>存储原始数据</td>\n<td>简化查询、提供数据抽象、安全性控制</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td>取决于表的大小和索引</td>\n<td>取决于视图的查询复杂度</td>\n</tr>\n<tr>\n<td><strong>安全性</strong></td>\n<td>通过权限管理控制对表的访问</td>\n<td>通过视图控制用户对特定数据的访问</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"聚合与分组aggregation-and-grouping\"><a class=\"anchor\" href=\"#聚合与分组aggregation-and-grouping\">#</a> <strong>聚合与分组（Aggregation and Grouping）</strong></h2>\n<h3 id=\"1-聚合函数aggregation-functions\"><a class=\"anchor\" href=\"#1-聚合函数aggregation-functions\">#</a> 1. <strong>聚合函数（Aggregation Functions）</strong></h3>\n<p>聚合函数用于对一组数据执行计算，并返回一个单一值。这些函数通常用于统计、求和、平均值等操作。常见的聚合函数包括：</p>\n<ul>\n<li><strong> <code>COUNT()</code> </strong>：统计行的数量。</li>\n<li><strong> <code>SUM()</code> </strong>：计算数值列的总和。</li>\n<li><strong> <code>AVG()</code> </strong>：计算数值列的平均值。</li>\n<li><strong> <code>MAX()</code> </strong>：返回列中的最大值。</li>\n<li><strong> <code>MIN()</code> </strong>：返回列中的最小值。</li>\n</ul>\n<h4 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例：</h4>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> total_students, </span><br><span class=\"line\">       <span class=\"built_in\">AVG</span>(age) <span class=\"keyword\">AS</span> average_age, </span><br><span class=\"line\">       <span class=\"built_in\">MAX</span>(salary) <span class=\"keyword\">AS</span> highest_salary </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Employees;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>解释</strong>：\n<ul>\n<li><code>COUNT(*)</code> : 统计表中的总行数。</li>\n<li><code>AVG(age)</code> : 计算员工的平均年龄。</li>\n<li><code>MAX(salary)</code> : 返回最高的工资。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-分组group-by\"><a class=\"anchor\" href=\"#2-分组group-by\">#</a> 2. <strong>分组（GROUP BY）</strong></h3>\n<p><code>GROUP BY</code>  用于将查询结果按一列或多列的值进行分组。然后可以对每个分组应用聚合函数进行汇总计算。 <code>GROUP BY</code>  常用于分类统计、按类别聚合数据等场景。</p>\n<h4 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法：</h4>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, aggregate_function(column3)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column1, column2;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"示例-1按部门统计员工数量\"><a class=\"anchor\" href=\"#示例-1按部门统计员工数量\">#</a> 示例 1：按部门统计员工数量</h4>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> department, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> num_employees <span class=\"keyword\">FROM</span> Employees <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> department;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>解释</strong>：\n<ul>\n<li><code>GROUP BY department</code> ：将员工按部门分组。</li>\n<li><code>COUNT(*)</code> ：计算每个部门的员工数量。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-2按课程统计学生注册人数\"><a class=\"anchor\" href=\"#示例-2按课程统计学生注册人数\">#</a> 示例 2：按课程统计学生注册人数</h4>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> course_id, <span class=\"built_in\">COUNT</span>(student_id) <span class=\"keyword\">AS</span> num_students</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Enrollments</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> course_id;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>解释</strong>：\n<ul>\n<li><code>GROUP BY course_id</code> ：按课程 ID 分组。</li>\n<li><code>COUNT(student_id)</code> ：统计每个课程注册的学生数量。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-结合-group-by-和聚合函数\"><a class=\"anchor\" href=\"#3-结合-group-by-和聚合函数\">#</a> 3. <strong>结合  <code>GROUP BY</code>  和聚合函数</strong></h3>\n<p>在  <code>GROUP BY</code>  后，可以结合聚合函数对每个分组的数据进行统计计算。这种组合非常适用于分类汇总数据。</p>\n<h4 id=\"示例-3按城市统计平均工资\"><a class=\"anchor\" href=\"#示例-3按城市统计平均工资\">#</a> 示例 3：按城市统计平均工资</h4>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> city, <span class=\"built_in\">AVG</span>(salary) <span class=\"keyword\">AS</span> average_salary</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> city;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>解释</strong>：\n<ul>\n<li><code>GROUP BY city</code> ：将员工按所在城市分组。</li>\n<li><code>AVG(salary)</code> ：计算每个城市的平均工资。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-having-子句\"><a class=\"anchor\" href=\"#4-having-子句\">#</a> 4. <strong> <code>HAVING</code>  子句</strong></h3>\n<p><code>HAVING</code>  子句用于在分组之后对分组后的数据进行过滤。与  <code>WHERE</code>  子句不同， <code>HAVING</code>  主要用于处理聚合后的结果集，通常结合  <code>GROUP BY</code>  使用。</p>\n<h4 id=\"示例-4过滤出注册人数大于100的课程\"><a class=\"anchor\" href=\"#示例-4过滤出注册人数大于100的课程\">#</a> 示例 4：过滤出注册人数大于 100 的课程</h4>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> course_id, <span class=\"built_in\">COUNT</span>(student_id) <span class=\"keyword\">AS</span> num_students</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Enrollments</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> course_id</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"built_in\">COUNT</span>(student_id) <span class=\"operator\">&gt;</span> <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>解释</strong>：\n<ul>\n<li><code>GROUP BY course_id</code> ：将数据按课程 ID 分组。</li>\n<li><code>HAVING COUNT(student_id) &gt; 100</code> ：过滤出注册人数超过 100 的课程。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-group-by-与-order-by-一起使用\"><a class=\"anchor\" href=\"#5-group-by-与-order-by-一起使用\">#</a> 5. <strong> <code>GROUP BY</code>  与  <code>ORDER BY</code>  一起使用</strong></h3>\n<p>可以使用  <code>GROUP BY</code>  和  <code>ORDER BY</code>  组合，对分组后的结果进行排序。通常用于根据聚合值对结果进行排序。</p>\n<h4 id=\"示例-5按部门统计员工数量并按数量排序\"><a class=\"anchor\" href=\"#示例-5按部门统计员工数量并按数量排序\">#</a> 示例 5：按部门统计员工数量并按数量排序</h4>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> department, <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">AS</span> num_employees</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> department</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> num_employees <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>解释</strong>：\n<ul>\n<li><code>GROUP BY department</code> ：按部门分组。</li>\n<li><code>COUNT(*)</code> ：计算每个部门的员工数量。</li>\n<li><code>ORDER BY num_employees DESC</code> ：按员工数量降序排序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h3>\n<ul>\n<li><strong>聚合函数</strong>：用于对一组数据进行汇总操作，如求和、计数、最大值、最小值、平均值等。</li>\n<li><strong> <code>GROUP BY</code> </strong>：用于将查询结果按列值分组，并对每个分组应用聚合函数进行统计。</li>\n<li><strong> <code>HAVING</code>  子句</strong>：用于在分组之后对结果进行进一步的过滤，常与  <code>GROUP BY</code>  结合使用。</li>\n<li><strong> <code>ORDER BY</code>  子句</strong>：可以与  <code>GROUP BY</code>  一起使用，用于对分组后的结果进行排序。</li>\n</ul>\n<hr>\n<h2 id=\"set运算符\"><a class=\"anchor\" href=\"#set运算符\">#</a> set 运算符</h2>\n<h3 id=\"1-union并集运算符\"><a class=\"anchor\" href=\"#1-union并集运算符\">#</a> 1. <strong>UNION</strong>：并集运算符</h3>\n<ul>\n<li>\n<p><strong>作用</strong>： <code>UNION</code>  运算符用于合并两个查询的结果集，并去除重复的行。换句话说， <code>UNION</code>  返回两个查询结果的并集，并只保留唯一的行。</p>\n</li>\n<li>\n<p><strong>语法</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table2;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p><strong>特点</strong>：</p>\n<ul>\n<li>默认去除重复行。</li>\n<li>列的数量、顺序、数据类型必须在两个查询中一致。</li>\n</ul>\n</li>\n<li>\n<p><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Customers;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"2-union-all并集包含重复值\"><a class=\"anchor\" href=\"#2-union-all并集包含重复值\">#</a> 2. <strong>UNION ALL</strong>：并集（包含重复值）</h3>\n<ul>\n<li>\n<p><strong>作用</strong>： <code>UNION ALL</code>  与  <code>UNION</code>  类似，但它不会去除重复行，它会返回所有结果，包括重复的行。</p>\n</li>\n<li>\n<p><strong>语法</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table2;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Customers;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"3-intersect交集运算符\"><a class=\"anchor\" href=\"#3-intersect交集运算符\">#</a> 3. <strong>INTERSECT</strong>：交集运算符</h3>\n<ul>\n<li>\n<p><strong>作用</strong>： <code>INTERSECT</code>  运算符用于返回两个查询结果的交集，即两个结果集中都包含的行。</p>\n</li>\n<li>\n<p><strong>语法</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">INTERSECT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table2;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p><strong>特点</strong>：</p>\n<ul>\n<li>只返回两个查询结果中都存在的行。</li>\n<li>列的数量、顺序、数据类型必须在两个查询中一致。</li>\n</ul>\n</li>\n<li>\n<p><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">INTERSECT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Customers;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>返回既在  <code>Employees</code>  表中也在  <code>Customers</code>  表中的  <code>name</code> 。</p>\n</li>\n</ul>\n<h3 id=\"4-except或-minus差集运算符\"><a class=\"anchor\" href=\"#4-except或-minus差集运算符\">#</a> 4. <strong>EXCEPT</strong>（或  <code>MINUS</code> ）：差集运算符</h3>\n<ul>\n<li>\n<p><strong>作用</strong>： <code>EXCEPT</code> （在某些数据库中也叫  <code>MINUS</code> ）运算符用于返回第一个查询结果集中有，但第二个查询结果集中没有的行。它相当于集合的差集操作。</p>\n</li>\n<li>\n<p><strong>语法</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">EXCEPT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table2;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p><strong>特点</strong>：</p>\n<ul>\n<li>返回只在第一个查询中出现的行，而在第二个查询中不存在的行。</li>\n<li>列的数量、顺序、数据类型必须在两个查询中一致。</li>\n</ul>\n</li>\n<li>\n<p><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">EXCEPT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Customers;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>返回在  <code>Employees</code>  表中但不在  <code>Customers</code>  表中的  <code>name</code> 。</p>\n</li>\n</ul>\n<h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项：</h3>\n<ul>\n<li><strong>列的数量和类型</strong>：使用 SET 运算符的查询中，两个查询返回的列的数量、顺序、数据类型必须相同。</li>\n<li><strong>排序</strong>：通常情况下， <code>ORDER BY</code>  子句只能应用在最终的结果集上，而不能分别应用到每个单独的查询。</li>\n</ul>\n<h3 id=\"示例场景\"><a class=\"anchor\" href=\"#示例场景\">#</a> 示例场景：</h3>\n<ol>\n<li><strong>查询在两个表中都有的记录</strong>（交集）：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> email <span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">INTERSECT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> email <span class=\"keyword\">FROM</span> Customers;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>返回同时存在于  <code>Employees</code>  和  <code>Customers</code>  表中的电子邮件地址。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>查询只存在于一个表中的记录</strong>（差集）：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> email <span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">EXCEPT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> email <span class=\"keyword\">FROM</span> Customers;</span><br></pre></td></tr></table></figure><br>\n 返回存在于  <code>Employees</code>  表中但不存在于  <code>Customers</code>  表中的电子邮件地址。</li>\n<li><strong>合并两个表中的记录</strong>（并集）：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> email <span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> email <span class=\"keyword\">FROM</span> Customers;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>返回  <code>Employees</code>  和  <code>Customers</code>  表中所有唯一的电子邮件地址。</li>\n</ul>\n<h3 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> 总结：</h3>\n<ul>\n<li><strong> <code>UNION</code> </strong>：合并两个查询的结果集，去除重复行。</li>\n<li><strong> <code>UNION ALL</code> </strong>：合并两个查询的结果集，保留所有行（包括重复行）。</li>\n<li><strong> <code>INTERSECT</code> </strong>：返回两个查询结果集的交集（都存在的行）。</li>\n<li><strong> <code>EXCEPT</code> </strong>（或  <code>MINUS</code> ）：返回只存在于第一个查询结果集中的行。</li>\n</ul>\n<p>SET 运算符在 SQL 查询中非常有用，特别是在需要组合、比较或处理多个数据集时。</p>\n<hr>\n<h2 id=\"null-values-and-three-valued-logic\"><a class=\"anchor\" href=\"#null-values-and-three-valued-logic\">#</a> NULL Values and Three-valued Logic</h2>\n<h3 id=\"1-null-值\"><a class=\"anchor\" href=\"#1-null-值\">#</a> <strong>1. NULL 值</strong></h3>\n<ul>\n<li><strong> <code>NULL</code> </strong> 表示缺失的、未知的或不可用的值。它不是空字符串 ( <code>''</code> ) 或零 ( <code>0</code> )，而是一个特殊的值，表示该列在某行中没有数据。</li>\n</ul>\n<h4 id=\"如何理解-null\"><a class=\"anchor\" href=\"#如何理解-null\">#</a> <strong>如何理解 NULL</strong>：</h4>\n<ul>\n<li><strong>NULL</strong> 不等于任何值，包括它自身。也就是说， <code>NULL != NULL</code> ， <code>NULL = NULL</code>  的结果也是  <code>FALSE</code>  或  <code>UNKNOWN</code> ，因为 NULL 表示未知，因此两个 NULL 不能被比较为相等。</li>\n<li>在计算中，涉及 NULL 的表达式结果通常也是 NULL。例如， <code>5 + NULL</code>  或  <code>NULL + NULL</code>  的结果都是 NULL。</li>\n</ul>\n<h4 id=\"查询中的-null\"><a class=\"anchor\" href=\"#查询中的-null\">#</a> <strong>查询中的 NULL</strong>：</h4>\n<p>在查询中处理 NULL 值时，需要使用  <code>IS NULL</code>  或  <code>IS NOT NULL</code>  来检查某列是否为空。</p>\n<ul>\n<li><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Employees <span class=\"keyword\">WHERE</span> salary <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure></li>\n<li>这将返回所有  <code>salary</code>  列中值为  <code>NULL</code>  的员工。<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Employees <span class=\"keyword\">WHERE</span> salary <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure></li>\n<li>这将返回所有  <code>salary</code>  列中值不为  <code>NULL</code>  的员工。</li>\n</ul>\n<h3 id=\"2-三值逻辑three-valued-logic-3vl\"><a class=\"anchor\" href=\"#2-三值逻辑three-valued-logic-3vl\">#</a> <strong>2. 三值逻辑（Three-Valued Logic, 3VL）</strong></h3>\n<p>在 SQL 中，逻辑运算符（ <code>AND</code> 、 <code>OR</code> 、 <code>NOT</code>  等）遵循三值逻辑。SQL 中的逻辑结果不仅有  <code>TRUE</code>  和  <code>FALSE</code> ，还有第三个可能的值  <code>UNKNOWN</code> ，当表达式中涉及 NULL 时，结果可能是  <code>UNKNOWN</code> 。</p>\n<h4 id=\"三值逻辑表\"><a class=\"anchor\" href=\"#三值逻辑表\">#</a> <strong>三值逻辑表</strong></h4>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>TRUE AND TRUE</code></td>\n<td><code>TRUE</code></td>\n</tr>\n<tr>\n<td><code>TRUE AND FALSE</code></td>\n<td><code>FALSE</code></td>\n</tr>\n<tr>\n<td><code>TRUE AND NULL</code></td>\n<td><code>UNKNOWN</code></td>\n</tr>\n<tr>\n<td><code>FALSE AND FALSE</code></td>\n<td><code>FALSE</code></td>\n</tr>\n<tr>\n<td><code>FALSE AND NULL</code></td>\n<td><code>FALSE</code></td>\n</tr>\n<tr>\n<td><code>NULL AND NULL</code></td>\n<td><code>UNKNOWN</code></td>\n</tr>\n<tr>\n<td><code>TRUE OR TRUE</code></td>\n<td><code>TRUE</code></td>\n</tr>\n<tr>\n<td><code>TRUE OR FALSE</code></td>\n<td><code>TRUE</code></td>\n</tr>\n<tr>\n<td><code>TRUE OR NULL</code></td>\n<td><code>TRUE</code></td>\n</tr>\n<tr>\n<td><code>FALSE OR FALSE</code></td>\n<td><code>FALSE</code></td>\n</tr>\n<tr>\n<td><code>FALSE OR NULL</code></td>\n<td><code>UNKNOWN</code></td>\n</tr>\n<tr>\n<td><code>NULL OR NULL</code></td>\n<td><code>UNKNOWN</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"三值逻辑在-sql-中的行为\"><a class=\"anchor\" href=\"#三值逻辑在-sql-中的行为\">#</a> <strong>三值逻辑在 SQL 中的行为</strong>：</h4>\n<ul>\n<li><strong> <code>AND</code>  运算符</strong>：只要有一个操作数为  <code>FALSE</code> ，结果就是  <code>FALSE</code> 。如果有一个为  <code>NULL</code> ，而另一个为  <code>TRUE</code> ，结果是  <code>UNKNOWN</code> 。</li>\n<li><strong> <code>OR</code>  运算符</strong>：只要有一个操作数为  <code>TRUE</code> ，结果就是  <code>TRUE</code> 。如果有一个为  <code>NULL</code> ，另一个为  <code>FALSE</code> ，结果是  <code>UNKNOWN</code> 。</li>\n<li><strong> <code>NOT</code>  运算符</strong>：当对  <code>NULL</code>  使用  <code>NOT</code>  时，结果仍然是  <code>UNKNOWN</code> 。</li>\n</ul>\n<h4 id=\"示例-2\"><a class=\"anchor\" href=\"#示例-2\">#</a> <strong>示例</strong>：</h4>\n<ul>\n<li><strong> <code>AND</code>  运算示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Employees </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> <span class=\"number\">50000</span> <span class=\"keyword\">AND</span> commission <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure></li>\n<li>在这种情况下，如果  <code>commission</code>  列为 NULL 且  <code>salary &gt; 50000</code> ，则逻辑判断为  <code>TRUE AND UNKNOWN</code> ，结果为  <code>UNKNOWN</code> ，因此不会返回该行。</li>\n<li><strong> <code>OR</code>  运算示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Employees </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> salary <span class=\"operator\">&gt;</span> <span class=\"number\">50000</span> <span class=\"keyword\">OR</span> commission <span class=\"keyword\">IS</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure></li>\n<li>如果  <code>salary &gt; 50000</code>  为  <code>TRUE</code>  或  <code>commission</code>  为  <code>NULL</code> ，查询会返回符合条件的行，因为  <code>TRUE OR UNKNOWN</code>  的结果是  <code>TRUE</code> 。</li>\n</ul>\n<h3 id=\"3-聚合函数和-null\"><a class=\"anchor\" href=\"#3-聚合函数和-null\">#</a> <strong>3. 聚合函数和 NULL</strong></h3>\n<p>在 SQL 中，聚合函数处理 NULL 值的方式各不相同：</p>\n<ul>\n<li><strong> <code>COUNT(column_name)</code> </strong>：只统计非 NULL 值的行。</li>\n<li><strong> <code>COUNT(*)</code> </strong>：统计所有行，包括 NULL 值。</li>\n<li><strong> <code>SUM()</code> </strong>、<strong> <code>AVG()</code> </strong>：忽略 NULL 值，仅对非 NULL 值进行计算。</li>\n<li><strong> <code>MAX()</code> </strong>、<strong> <code>MIN()</code> </strong>：同样忽略 NULL 值，只考虑非 NULL 的最大值或最小值。</li>\n</ul>\n<h4 id=\"示例-3\"><a class=\"anchor\" href=\"#示例-3\">#</a> 示例：</h4>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>), <span class=\"built_in\">COUNT</span>(salary), <span class=\"built_in\">AVG</span>(salary)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Employees;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong> <code>COUNT(*)</code> </strong>：计算所有行的总数，包括  <code>salary</code>  为 NULL 的行。</li>\n<li><strong> <code>COUNT(salary)</code> </strong>：只计算  <code>salary</code>  不为 NULL 的行。</li>\n<li><strong> <code>AVG(salary)</code> </strong>：只计算  <code>salary</code>  不为 NULL 的行，并求其平均值。</li>\n</ul>\n<h3 id=\"4-where-与-having-的-null-处理\"><a class=\"anchor\" href=\"#4-where-与-having-的-null-处理\">#</a> <strong>4. WHERE 与 HAVING 的 NULL 处理</strong></h3>\n<p>在查询中处理 NULL 需要特别注意，尤其是  <code>WHERE</code>  和  <code>HAVING</code>  子句。SQL 中不能使用  <code>=</code>  来比较 NULL，而必须使用  <code>IS NULL</code>  或  <code>IS NOT NULL</code> 。</p>\n<h4 id=\"示例-4\"><a class=\"anchor\" href=\"#示例-4\">#</a> 示例：</h4>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> department, <span class=\"built_in\">AVG</span>(salary)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Employees</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> department</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"built_in\">AVG</span>(salary) <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>这将只返回  <code>AVG(salary)</code>  不为 NULL 的分组。</li>\n</ul>\n<h3 id=\"总结-4\"><a class=\"anchor\" href=\"#总结-4\">#</a> <strong>总结</strong></h3>\n<ul>\n<li><strong>NULL</strong> 是表示缺失或未知值的特殊标记，在 SQL 中不能使用普通的等式比较，需要使用  <code>IS NULL</code>  和  <code>IS NOT NULL</code> 。</li>\n<li><strong>三值逻辑（TRUE、FALSE、UNKNOWN）</strong> 是 SQL 中的基本逻辑系统，主要用于处理涉及 NULL 值的逻辑运算。</li>\n<li>聚合函数会自动忽略 NULL 值（如  <code>SUM()</code> 、 <code>AVG()</code> ），但  <code>COUNT(*)</code>  例外，它会包括所有行。</li>\n</ul>\n<p>了解 NULL 值和三值逻辑对编写复杂的 SQL 查询至关重要，尤其是在处理可能包含缺失数据的数据库时。</p>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "http://example.com/2024/09/19/networks/network_lec_6/",
            "url": "http://example.com/2024/09/19/networks/network_lec_6/",
            "title": "lecture_6Network Layer 3",
            "date_published": "2024-09-19T10:01:35.177Z",
            "content_html": "<h1 id=\"链路状态ls和距离向量dv算法介绍\"><a class=\"anchor\" href=\"#链路状态ls和距离向量dv算法介绍\">#</a> <span class=\"label danger\">链路状态（LS）和距离向量（DV）算法介绍</span></h1>\n<h2 id=\"1-链路状态算法link-state-ls\"><a class=\"anchor\" href=\"#1-链路状态算法link-state-ls\">#</a> 1. 链路状态算法（Link State, LS）</h2>\n<p><strong>工作原理</strong>：</p>\n<ul>\n<li>\n<p><strong>全局视图</strong>：每个路由器都会维护整个网络的拓扑结构，收集关于整个网络的链路状态信息。</p>\n</li>\n<li>\n<p><strong>链路状态广播</strong>：路由器向网络中的所有其他路由器发送链路状态包（LSA），每个路由器都会广播自己与邻居的连接情况，并包括这些连接的代价。</p>\n</li>\n<li>\n<p><strong>拓扑图更新</strong>：所有路由器根据接收到的链路状态信息构建整个网络的拓扑图。</p>\n</li>\n<li>\n<p><strong>Dijkstra 算法</strong>：一旦所有路由器获得了网络的拓扑图，它们会使用 Dijkstra 算法来计算从自己到每个目的地的最短路径。</p>\n</li>\n</ul>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>\n<p><strong>快速收敛</strong>：LS 算法基于整个网络的拓扑信息进行计算，能够迅速做出决策。</p>\n</li>\n<li>\n<p><strong>路径选择精准</strong>：由于路由器了解整个网络的状态，它能够选择最佳路径，包括负载均衡等高级策略。</p>\n</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>\n<p><strong>计算复杂度高</strong>：LS 算法的时间复杂度为 O (n^2) 或 O (n log n)，对于大型网络来说，计算和存储的开销较大。</p>\n</li>\n<li>\n<p><strong>消息传递量大</strong>：路由器需要定期向整个网络广播链路状态更新，因此在大规模网络中会产生较多的控制流量。</p>\n</li>\n</ul>\n<h2 id=\"2-距离向量算法distance-vector-dv\"><a class=\"anchor\" href=\"#2-距离向量算法distance-vector-dv\">#</a> 2. 距离向量算法（Distance Vector, DV）</h2>\n<p><strong>工作原理</strong>：</p>\n<ul>\n<li>\n<p><strong>局部视图</strong>：每个路由器只与邻居路由器交换路由信息，并且每个路由器只知道自己到邻居的距离。</p>\n</li>\n<li>\n<p><strong>迭代更新</strong>：每个路由器通过与邻居交换 “距离向量”（表示到每个目的地的距离）来逐步构建自己的路由表。路由器根据邻居的信息逐步更新自己的最优路径。</p>\n</li>\n<li>\n<p><strong>贝尔曼 - 福特算法</strong>：DV 算法依赖贝尔曼 - 福特算法进行路径选择，它通过多次迭代更新到各个目的地的最短距离。</p>\n</li>\n</ul>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>\n<p><strong>简单</strong>：DV 算法实现相对简单，路由器只需要与邻居交换信息，不需要维护整个网络的拓扑图。</p>\n</li>\n<li>\n<p><strong>计算开销小</strong>：由于只与邻居交换信息，计算和消息传递的开销较低。</p>\n</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>\n<p><strong>收敛较慢</strong>：由于信息传播速度较慢，尤其在大网络中，收敛时间可能较长。出现网络故障时，DV 算法需要较长时间才能收敛到新的状态。</p>\n</li>\n<li>\n<p><strong>计数到无穷大问题</strong>：当网络中出现环路时，DV 算法可能陷入 “计数到无穷大” 的问题，即路由器不断增大其距离估计值，直到达到上限（通常为 16 跳）。</p>\n</li>\n</ul>\n<h2 id=\"3-ls和dv的比较\"><a class=\"anchor\" href=\"#3-ls和dv的比较\">#</a> 3. LS 和 DV 的比较</h2>\n<ul>\n<li>\n<p><strong>消息复杂度</strong>：LS 的消息复杂度为 O (nE)（n 为节点数，E 为边数），DV 的消息复杂度较低，因为它只在邻居之间交换消息。</p>\n</li>\n<li>\n<p><strong>收敛速度</strong>：LS 算法收敛快，DV 算法由于逐步迭代，收敛时间可能较长。</p>\n</li>\n<li>\n<p><strong>应用场景</strong>：LS 算法适用于需要高精度、高可靠性的网络（如 OSPF 协议），DV 算法则适用于较小、简单的网络（如 RIP 协议）。</p>\n</li>\n</ul>\n<p>总结来说，LS 算法适合对全网有更高掌控需求的大型网络，DV 算法则更适合小型或中型网络中简单的路径选择需求。</p>\n<h1 id=\"分层路由hierarchical-routing\"><a class=\"anchor\" href=\"#分层路由hierarchical-routing\">#</a> <span class=\"label danger\">分层路由 (Hierarchical routing)</span></h1>\n<h2 id=\"1as\"><a class=\"anchor\" href=\"#1as\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovLzEuQVM=\">1.AS</span> (autonomous systems)</h2>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "http://example.com/2024/09/17/ue/hello-world/",
            "url": "http://example.com/2024/09/17/ue/hello-world/",
            "title": "Hello World",
            "date_published": "2024-09-17T04:09:35.616Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n<p>I LOVE YOU</p>\n",
            "tags": [
                "ue"
            ]
        },
        {
            "id": "http://example.com/2024/09/17/temeplete/temeplete1/",
            "url": "http://example.com/2024/09/17/temeplete/temeplete1/",
            "title": "wwwww",
            "date_published": "2024-09-17T00:18:17.167Z",
            "content_html": "<p>wwqswdsadwq</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/09/17/networks/hello-world/",
            "url": "http://example.com/2024/09/17/networks/hello-world/",
            "title": "Hello World",
            "date_published": "2024-09-16T15:34:21.998Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n<p>I LOVE YOU</p>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "http://example.com/2024/09/17/it-projectManage/hello-world/",
            "url": "http://example.com/2024/09/17/it-projectManage/hello-world/",
            "title": "Hello World",
            "date_published": "2024-09-16T14:15:39.413Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n<p>I LOVE YOU</p>\n",
            "tags": [
                "IT项目管理"
            ]
        },
        {
            "id": "http://example.com/2024/09/16/database/learn-test/",
            "url": "http://example.com/2024/09/16/database/learn-test/",
            "title": "introduction",
            "date_published": "2024-09-16T13:03:36.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>此分类主要整理了悉尼大学 9120 数据库的知识，内容包含 E-R 图，RM 图，以及 postgresql 的内容。</p>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "http://example.com/2024/09/16/database/lec_4%20%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E4%B8%8Esql/",
            "url": "http://example.com/2024/09/16/database/lec_4%20%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E4%B8%8Esql/",
            "title": "lec_4 关系代数与sql",
            "date_published": "2024-09-16T13:03:36.000Z",
            "content_html": "<h1 id=\"关系代数与sql\"><a class=\"anchor\" href=\"#关系代数与sql\">#</a> 关系代数与 sql</h1>\n<h2 id=\"关系代数\"><a class=\"anchor\" href=\"#关系代数\">#</a> <span class=\"label danger\">关系代数</span></h2>\n<ol>\n<li>关系代数简介</li>\n</ol>\n<ul>\n<li><strong>关系代数（Relational Algebra, RA）</strong> 是针对关系模型的操作语言。</li>\n<li>关系代数由一组操作符组成，可以对关系（表）执行操作，描述如何一步一步计算出所需结果。</li>\n<li>关系代数是命令式的，描述了查询的过程，而不是结果的约束。</li>\n</ul>\n<ol start=\"2\">\n<li>关系代数基本操作符</li>\n</ol>\n<ul>\n<li>\n<p><strong>选择 (Selection, σ)</strong>：</p>\n<ul>\n<li>选择操作从一个关系（表）中挑选出符合某个条件的元组（行）。</li>\n<li>形式：σ_condition (R)</li>\n<li>示例：σ_country='AUS'(Student) 会返回所有国家为 “澳大利亚” 的学生。</li>\n</ul>\n</li>\n<li>\n<p><strong>投影 (Projection, π)</strong>：</p>\n<ul>\n<li>投影操作从一个关系中选择特定的属性（列），并删除重复的元组。</li>\n<li>形式：π_attributes (R)</li>\n<li>示例：π_name, country (Student) 返回学生表中的姓名和国家列，去除重复值。</li>\n</ul>\n</li>\n<li>\n<p><strong>笛卡尔积 (Cross Product, ×)</strong>：</p>\n<ul>\n<li>笛卡尔积操作将两个关系的所有元组进行组合，形成新的关系，结果的每一行都是两个关系中元组的所有可能组合。比如学生表有 2 条数据，老师表有 3 条数据，组成的新表就有 6 条数据。</li>\n<li>形式：R × S</li>\n<li>示例：Student × Enrolled 将两个表中的每一个元组组合在一起。</li>\n</ul>\n</li>\n<li>\n<p><strong>联合 (Union, ∪)</strong>：</p>\n<ul>\n<li>联合操作返回两个关系中的所有元组，自动去除重复的行。</li>\n<li>形式：R ∪ S</li>\n<li>示例：π_sid (Student) ∪ π_sid (Enrolled) 返回在学生和选课表中出现的所有学生 ID。</li>\n</ul>\n</li>\n<li>\n<p><strong>交集 (Intersection, ∩)</strong>：</p>\n<ul>\n<li>交集操作返回在两个关系中都存在的元组。</li>\n<li>形式：R ∩ S</li>\n<li>示例：π_sid (Student) ∩ π_sid (Enrolled) 返回同时出现在学生表和选课表中的学生 ID。</li>\n</ul>\n</li>\n<li>\n<p><strong>差集 (Difference, −)</strong>：</p>\n<ul>\n<li>差集操作返回在第一个关系中存在但在第二个关系中不存在的元组。</li>\n<li>形式：R − S</li>\n<li>示例：π_sid (Student) − π_sid (Enrolled) 返回只在学生表中存在而没有选课的学生 ID。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>连接操作</li>\n</ol>\n<h2 id=\"连接操作\"><a class=\"anchor\" href=\"#连接操作\">#</a> <span class=\"label danger\">连接操作</span></h2>\n<ol>\n<li><strong>条件连接 (Theta Join, ⋈ₛ)</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>定义</strong>：条件连接是基于给定的条件，将两个关系的笛卡尔积中的行进行筛选。该条件可以是任意的布尔表达式（例如  <code>=</code> 、 <code>&gt;</code> 、 <code>&lt;</code>  等比较操作符）。</p>\n</li>\n<li>\n<p><strong>形式</strong>： <code>R ⋈ₛ S</code> ，其中  <code>ₛ</code>  是连接条件。</p>\n</li>\n<li>\n<p><strong>示例</strong>：假设有两个表  <code>Student</code>  和  <code>Enrolled</code> ，我们希望查找学生和他们所选的课程：</p>\n<ul>\n<li>表  <code>Student</code> :</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>sid</th>\n<th>name</th>\n<th>country</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1001</td>\n<td>lan</td>\n<td>AUS</td>\n</tr>\n<tr>\n<td>1002</td>\n<td>Ha</td>\n<td>ROK</td>\n</tr>\n</tbody>\n</table>\n<pre><code>- 表 `Enrolled`:\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>sid</th>\n<th>uos_code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1001</td>\n<td>COMP5318</td>\n</tr>\n<tr>\n<td>1002</td>\n<td>COMP5318</td>\n</tr>\n</tbody>\n</table>\n<pre><code>查询学生与他们所选课程，可以使用 `sid` 作为连接条件：\n\n- `Student ⋈_&#123;Student.sid = Enrolled.sid&#125; Enrolled`:\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>sid</th>\n<th>name</th>\n<th>country</th>\n<th>uos_code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1001</td>\n<td>lan</td>\n<td>AUS</td>\n<td>COMP5318</td>\n</tr>\n<tr>\n<td>1002</td>\n<td>Ha</td>\n<td>ROK</td>\n<td>COMP5318</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>通过这个操作，我们得到了两个表中  <code>sid</code>  匹配的行。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>自然连接 (Natural Join, ⋈)</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>定义</strong>：自然连接是一种特殊的等值连接，它自动基于两个关系中<strong>具有相同名称</strong>且<strong>值相等</strong>的属性进行连接，且在结果中只保留一个重复的属性列。</p>\n</li>\n<li>\n<p><strong>形式</strong>： <code>R ⋈ S</code> ，连接条件是所有同名属性相等。</p>\n</li>\n<li>\n<p><strong>示例</strong>：考虑前面的  <code>Student</code>  和  <code>Enrolled</code>  表，假设我们要进行自然连接：</p>\n<ul>\n<li><code>Student ⋈ Enrolled</code> :</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>sid</th>\n<th>name</th>\n<th>country</th>\n<th>uos_code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1001</td>\n<td>lan</td>\n<td>AUS</td>\n<td>COMP5318</td>\n</tr>\n<tr>\n<td>1002</td>\n<td>Ha</td>\n<td>ROK</td>\n<td>COMP5318</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在自然连接中， <code>sid</code>  是两个表中共有的属性，连接后只保留一列  <code>sid</code> 。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>等值连接 (Equi-Join)</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：等值连接是条件连接的一种特例，连接条件只包含相等比较（ <code>=</code> ）。</li>\n<li><strong>形式</strong>： <code>R ⋈_&#123;A = B&#125; S</code> ，其中  <code>A</code>  和  <code>B</code>  是两个表中的属性。</li>\n<li><strong>与自然连接的区别</strong>：等值连接会保留连接条件中的重复属性，而自然连接则去掉重复列。</li>\n<li><strong>示例</strong>： <code>Student ⋈_&#123;Student.sid = Enrolled.sid&#125; Enrolled</code> ，结果中会保留两个  <code>sid</code>  列。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>外连接 (Outer Join)</strong></li>\n</ol>\n<p>外连接允许在结果中包含没有匹配行的元组，并填充相应部分为  <code>NULL</code> 。</p>\n<ul>\n<li>\n<p><strong>左外连接 (Left Outer Join)</strong>：返回左表中的所有元组，即使右表中没有匹配的行。</p>\n<ul>\n<li><strong>形式</strong>： <code>R LEFT OUTER JOIN S</code> 。</li>\n<li><strong>示例</strong>： <code>Student LEFT OUTER JOIN Enrolled</code>  会返回学生表中的所有行，即使有些学生没有选课，未匹配的部分用  <code>NULL</code>  填充：</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>sid</th>\n<th>name</th>\n<th>country</th>\n<th>uos_code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1001</td>\n<td>lan</td>\n<td>AUS</td>\n<td>COMP5318</td>\n</tr>\n<tr>\n<td>1002</td>\n<td>HA</td>\n<td>ROK</td>\n<td>COMP5318</td>\n</tr>\n<tr>\n<td>1003</td>\n<td>Grant</td>\n<td>AUS</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p><strong>右外连接 (Right Outer Join)</strong>：返回右表中的所有元组，即使左表中没有匹配的行。</p>\n<ul>\n<li><strong>形式</strong>： <code>R RIGHT OUTER JOIN S</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong>全外连接 (Full Outer Join)</strong>：返回两个表中的所有元组，包括没有匹配的行，并将未匹配的部分用  <code>NULL</code>  填充。</p>\n<ul>\n<li><strong>形式</strong>： <code>R FULL OUTER JOIN S</code> 。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sql简介\"><a class=\"anchor\" href=\"#sql简介\">#</a> <span class=\"label danger\">SQL 简介</span></h2>\n<p>在 SQL 中，集合操作用于对两个查询结果集进行运算，类似于关系代数中的集合运算。常见的 SQL 集合操作包括  <code>UNION</code> 、 <code>INTERSECT</code>  和  <code>EXCEPT</code> 。这些操作用于合并、比较两个查询的结果集，并遵循集合的基本规则，如去除重复数据。每个操作都需要两个结果集具有<strong>相同数量的列</strong>，且相应列的数据类型必须兼容。</p>\n<h3 id=\"1-union并集\"><a class=\"anchor\" href=\"#1-union并集\">#</a> 1. <strong>UNION</strong>（并集）</h3>\n<p><code>UNION</code>  操作返回两个查询结果的并集，也就是说，它会包含两个结果集中所有的行，且自动去除重复的行。</p>\n<ul>\n<li>\n<p><strong>语法</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> 列<span class=\"number\">1</span>, 列<span class=\"number\">2</span>, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> 表<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> 列<span class=\"number\">1</span>, 列<span class=\"number\">2</span>, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> 表<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Students</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Teachers;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>该查询将返回  <code>Students</code>  表和  <code>Teachers</code>  表中的所有不同的名字（去重）。</p>\n</li>\n<li>\n<p><strong>特点</strong>：</p>\n<ul>\n<li>自动去除重复行。</li>\n<li>可以使用  <code>UNION ALL</code>  来保留重复行。</li>\n</ul>\n<p><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Students</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Teachers;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<p><code>UNION ALL</code>  将返回所有行，包括重复的行。</p>\n<h3 id=\"2-intersect交集\"><a class=\"anchor\" href=\"#2-intersect交集\">#</a> 2. **INTERSECT（** 交集）</h3>\n<p><code>INTERSECT</code>  操作返回两个查询结果的交集，即只返回在两个查询结果中都存在的行。</p>\n<ul>\n<li>\n<p><strong>语法</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> 列<span class=\"number\">1</span>, 列<span class=\"number\">2</span>, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> 表<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">INTERSECT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> 列<span class=\"number\">1</span>, 列<span class=\"number\">2</span>, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> 表<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>示例<br>\n <figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Students</span><br><span class=\"line\"><span class=\"keyword\">INTERSECT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Teachers;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>该查询将返回既是  <code>Students</code>  表又是  <code>Teachers</code>  表中的名字（即两个表中都存在的名字）。</p>\n</li>\n<li>\n<p><strong>特点</strong>：</p>\n<ul>\n<li>只返回两个结果集中都出现的行。</li>\n<li>自动去除重复行。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-except差集\"><a class=\"anchor\" href=\"#3-except差集\">#</a> 3. <strong>EXCEPT</strong>（差集）</h3>\n<p><code>EXCEPT</code>  操作返回在第一个查询结果中存在但在第二个查询结果中不存在的行。</p>\n<ul>\n<li>\n<p><strong>语法</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> 列<span class=\"number\">1</span>, 列<span class=\"number\">2</span>, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> 表<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">EXCEPT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> 列<span class=\"number\">1</span>, 列<span class=\"number\">2</span>, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> 表<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>示例<br>\n <figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Students</span><br><span class=\"line\"><span class=\"keyword\">EXCEPT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> name <span class=\"keyword\">FROM</span> Teachers;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>该查询将返回所有只存在于  <code>Students</code>  表中但不在  <code>Teachers</code>  表中的名字。</p>\n</li>\n<li>\n<p><strong>特点</strong>：</p>\n<ul>\n<li>返回只出现在第一个结果集中的行。</li>\n<li>自动去除重复行。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-union-intersect-和-except-的规则\"><a class=\"anchor\" href=\"#4-union-intersect-和-except-的规则\">#</a> 4. <strong>UNION、INTERSECT 和 EXCEPT 的规则</strong>：</h3>\n<ul>\n<li><strong>列数必须相同</strong>：在两个查询中， <code>SELECT</code>  子句中的列数量必须一致。</li>\n<li><strong>数据类型必须兼容</strong>：相应列的数据类型必须相同或兼容。</li>\n<li><strong>去除重复行</strong>：默认情况下， <code>UNION</code> 、 <code>INTERSECT</code>  和  <code>EXCEPT</code>  都会去除重复的行。</li>\n<li><strong>使用 ALL 保留重复行</strong>：如果希望保留重复行，可以使用  <code>UNION ALL</code> ，但  <code>INTERSECT ALL</code>  和  <code>EXCEPT ALL</code>  在部分 SQL 实现中并不支持。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h3>\n<ul>\n<li><strong> <code>UNION</code> </strong> 返回两个查询结果集的并集，去除重复行。</li>\n<li><strong> <code>INTERSECT</code> </strong> 返回两个查询结果集的交集，即共同存在的行。</li>\n<li><strong> <code>EXCEPT</code> </strong> 返回第一个结果集中有但第二个结果集中没有的行。</li>\n</ul>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "http://example.com/2024/09/16/database/lec_5%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A6%E6%9D%9F/",
            "url": "http://example.com/2024/09/16/database/lec_5%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A6%E6%9D%9F/",
            "title": "lec_5 数据库约束",
            "date_published": "2024-09-16T13:03:36.000Z",
            "content_html": "<h1 id=\"数据库约束database-constriants\"><a class=\"anchor\" href=\"#数据库约束database-constriants\">#</a> 数据库约束（Database constriants）</h1>\n<h2 id=\"完整性约束-intergral-constraint\"><a class=\"anchor\" href=\"#完整性约束-intergral-constraint\">#</a> 完整性约束 (Intergral constraint)</h2>\n<ol>\n<li>概要</li>\n</ol>\n<ul>\n<li>完整性约束指定：完整性约束是在数据库架构设计（schema design）过程中被定义的。数据库设计者负责确保定义的完整性约束之间不会互相冲突。</li>\n<li>⾃动化检测：虽然检测完整性约束的过程可以⾃动化，但这可能会引⼊不可接受的性能开销。</li>\n<li>完整性约束检查：完整性约束在数据库被修改时进⾏检查。可以指定检查完整性约束的时机，⽐如在⼀个 SQL 语句执⾏后或⼀个事务（transaction）结束时。\n<ul>\n<li>事务：⼀个事务是⼀组 SQL 语句，它们作为⼀个单⼀的、不可分割的操作执⾏，这个概念也被称为原⼦性（atomicity）。</li>\n</ul>\n</li>\n<li>违反完整性约束的反应：幻灯⽚还提到了如果违反了完整性约束，可以采取的⼏种响应措施：\n<ol>\n<li>拒绝数据库操作：不执⾏违反完整性约束的操作。</li>\n<li>中⽌整个事务：如果事务中的任何部分违反了完整性约束，就回滚（rollback）事务中的所有操作。</li>\n<li>执⾏ “维护” 操作：如果完整性约束被违反，执⾏必要的操作以恢复数据库到合法状态。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"事务transaction\"><a class=\"anchor\" href=\"#事务transaction\">#</a> 事务（Transaction）</h2>\n<h3 id=\"事务的关键特性-acid\"><a class=\"anchor\" href=\"#事务的关键特性-acid\">#</a> 事务的关键特性 (ACID)：</h3>\n<p>ACID 是事务的四个关键属性，分别是<strong>原子性 (Atomicity)</strong>、<strong>一致性 (Consistency)</strong>、<strong>隔离性 (Isolation)</strong> 和<strong>持久性 (Durability)</strong>。</p>\n<h4 id=\"1-原子性-atomicity\"><a class=\"anchor\" href=\"#1-原子性-atomicity\">#</a> 1. <strong>原子性 (Atomicity)</strong>：</h4>\n<ul>\n<li><strong>定义</strong>：事务中的所有操作要么全部执行成功，要么全部失败回滚。事务不能部分执行。</li>\n<li><strong>示例</strong>：假设你进行一个银行转账操作，转账事务包含两个步骤：从账户 A 扣钱，从账户 B 加钱。原子性确保如果其中一个步骤失败，整个转账操作会被回滚，避免账户 A 扣钱但账户 B 没有加钱的情况。</li>\n</ul>\n<h4 id=\"2-一致性-consistency\"><a class=\"anchor\" href=\"#2-一致性-consistency\">#</a> 2. <strong>一致性 (Consistency)</strong>：</h4>\n<ul>\n<li><strong>定义</strong>：事务执行前后，数据库必须保持一致性状态，确保数据库从一个合法的状态转换到另一个合法的状态。</li>\n<li><strong>示例</strong>：在银行转账的例子中，一致性确保无论事务成功或失败，账户 A 和账户 B 的总金额不会因为转账事务而改变。</li>\n</ul>\n<h4 id=\"3-隔离性-isolation\"><a class=\"anchor\" href=\"#3-隔离性-isolation\">#</a> 3. <strong>隔离性 (Isolation)</strong>：</h4>\n<ul>\n<li><strong>定义</strong>：多个事务同时执行时，一个事务的中间状态对其他事务是不可见的。隔离性保证并发事务之间互不干扰，避免数据不一致。</li>\n<li><strong>示例</strong>：如果两个用户同时从一个账户中取钱，隔离性保证每个用户在取钱时不会看到对方的操作结果，以避免超取。</li>\n</ul>\n<p>SQL 中有四种常见的事务隔离级别，分别是：</p>\n<ul>\n<li><strong>Read Uncommitted</strong>：允许读取其他未提交事务的数据，可能导致脏读（Dirty Read）。</li>\n<li><strong>Read Committed</strong>：只能读取其他事务已提交的数据，避免脏读。</li>\n<li><strong>Repeatable Read</strong>：确保同一个事务在读取数据时，数据在整个事务过程中不会被修改，避免不可重复读。</li>\n<li><strong>Serializable</strong>：事务被严格隔离，避免所有并发事务问题，通常开销较大。</li>\n</ul>\n<h4 id=\"4-持久性-durability\"><a class=\"anchor\" href=\"#4-持久性-durability\">#</a> 4. <strong>持久性 (Durability)</strong>：</h4>\n<ul>\n<li><strong>定义</strong>：一旦事务提交成功，其对数据库的修改就是永久性的，系统即使发生崩溃，也不会丢失已提交的事务结果。</li>\n<li><strong>示例</strong>：在银行转账完成并提交后，即使服务器崩溃，转账的记录仍然会保存在数据库中，不会丢失。</li>\n</ul>\n<hr>\n<h3 id=\"事务的生命周期\"><a class=\"anchor\" href=\"#事务的生命周期\">#</a> 事务的生命周期：</h3>\n<p>事务通常包括以下几个阶段：</p>\n<ol>\n<li>\n<p><strong>开始 (Begin)</strong>：</p>\n<ul>\n<li>通过  <code>BEGIN</code>  语句显式开始一个事务。</li>\n<li>也可以隐式开始（比如直接执行  <code>INSERT</code>  等操作）。</li>\n</ul>\n</li>\n<li>\n<p><strong>执行操作 (Perform Operations)</strong>：</p>\n<ul>\n<li>事务包含一组操作，如插入、更新、删除等 SQL 语句。</li>\n</ul>\n</li>\n<li>\n<p><strong>提交 (Commit)</strong>：</p>\n<ul>\n<li><code>COMMIT</code>  语句将事务的所有操作永久写入数据库。</li>\n<li>一旦提交，事务的更改就无法回滚。</li>\n</ul>\n</li>\n<li>\n<p><strong>回滚 (Rollback)</strong>：</p>\n<ul>\n<li>如果事务中的某个操作失败，或者用户手动调用  <code>ROLLBACK</code> ，事务将被回滚，所有对数据库的修改将被撤销。</li>\n</ul>\n</li>\n</ol>\n<p>示例：一个简单的事务<br>\n以下是一个 SQL 中事务的基本示例，涉及对数据库的修改和回滚：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;  <span class=\"comment\">-- 开始事务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入一条记录</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> accounts (account_id, balance) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 更新账户余额</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> accounts <span class=\"keyword\">SET</span> balance <span class=\"operator\">=</span> balance <span class=\"operator\">-</span> <span class=\"number\">200</span> <span class=\"keyword\">WHERE</span> account_id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 提交事务</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure></p>\n<p>在这个事务中，我们首先插入一个新账户，并将账户余额减少了 200。如果在任何步骤中发生错误（如账户不存在或余额不足），我们可以使用  <code>ROLLBACK</code>  撤销事务的所有操作。<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;  <span class=\"comment\">-- 开始事务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行一些操作</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> accounts (account_id, balance) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> accounts <span class=\"keyword\">SET</span> balance <span class=\"operator\">=</span> balance <span class=\"operator\">-</span> <span class=\"number\">200</span> <span class=\"keyword\">WHERE</span> account_id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 如果某个操作失败，则回滚事务</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"常见的事务问题\"><a class=\"anchor\" href=\"#常见的事务问题\">#</a> 常见的事务问题：</h3>\n<p>由于事务在并发情况下会相互影响，以下是一些常见的并发问题：</p>\n<ol>\n<li>\n<p><strong>脏读 (Dirty Read)</strong>：</p>\n<ul>\n<li>一个事务读取了另一个尚未提交的事务修改的数据，可能会导致数据不一致。</li>\n</ul>\n</li>\n<li>\n<p><strong>不可重复读 (Non-repeatable Read)</strong>：</p>\n<ul>\n<li>一个事务在多次读取同一数据时，数据可能已经被另一个事务修改，导致读取到不同的结果。</li>\n</ul>\n</li>\n<li>\n<p><strong>幻读 (Phantom Read)</strong>：</p>\n<ul>\n<li>一个事务在多次查询时，发现另一个事务插入了新数据，导致每次查询的结果集不同。</li>\n</ul>\n</li>\n</ol>\n<p>通过设置适当的隔离级别，可以避免这些并发问题。</p>\n<hr>\n<h2 id=\"断言assertions\"><a class=\"anchor\" href=\"#断言assertions\">#</a> 断言 (assertions)</h2>\n<p>Assertion 是一种谓词，表示数据库中的某个条件必须始终为真。它们用于确保某些业务规则始终在数据库中得到遵守。例如，假设我们有一条规则：“每个分支的贷款总额必须小于该分支的账户余额总和”。这种规则涉及多个表的约束，无法通过单一表的约束（如  <code>CHECK</code>  或  <code>FOREIGN KEY</code> ）来表达，因此需要使用  <code>ASSERTION</code>  。<br>\n创建 assertion<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION assertion_name <span class=\"keyword\">CHECK</span> (<span class=\"keyword\">condition</span>);</span><br></pre></td></tr></table></figure><br>\n 其中， <code>assertion_name</code>  是 Assertion 的名称， <code>condition</code>  是希望数据库始终满足的条件。每当数据库的状态发生改变时，数据库管理系统（DBMS）会检查该 Assertion 是否仍然成立 。</p>\n<p>例子 1 为了确保每个分支的贷款总额小于该分支的账户余额总和<br>\n <figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 该 Assertion 确保在任意分支中，不会出现贷款总额大于或等于账户余额总和的情况 。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION sum_constraint <span class=\"keyword\">CHECK</span> (</span><br><span class=\"line\">  <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> branch</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> (</span><br><span class=\"line\">      <span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(amount) <span class=\"keyword\">FROM</span> loan <span class=\"keyword\">WHERE</span> loan.branch_name <span class=\"operator\">=</span> branch.branch_name</span><br><span class=\"line\">    ) <span class=\"operator\">&gt;=</span> (</span><br><span class=\"line\">      <span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(amount) <span class=\"keyword\">FROM</span> account <span class=\"keyword\">WHERE</span> account.branch_name <span class=\"operator\">=</span> branch.branch_name</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"例子2-如果我们希望确保每个贷款都有至少一个借款人并且该借款人拥有余额不少于-1000-美元的账户可以创建以下-assertion-code4-\"><a class=\"anchor\" href=\"#例子2-如果我们希望确保每个贷款都有至少一个借款人并且该借款人拥有余额不少于-1000-美元的账户可以创建以下-assertion-code4-\">#</a> 例子 2 如果我们希望确保每个贷款都有至少一个借款人，并且该借款人拥有余额不少于 1000 美元的账户，可以创建以下 Assertion：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 该 Assertion 确保每笔贷款都满足至少有一个借款人拥有余额不少于 1000 美元的账户 。</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> ASSERTION balance_constraint <span class=\"keyword\">CHECK</span> (</span><br><span class=\"line\">  <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> loan</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> (</span><br><span class=\"line\">      <span class=\"keyword\">SELECT</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">FROM</span> borrower <span class=\"keyword\">JOIN</span> depositor <span class=\"keyword\">ON</span> borrower.customer_name <span class=\"operator\">=</span> depositor.customer_name</span><br><span class=\"line\">      <span class=\"keyword\">JOIN</span> account <span class=\"keyword\">ON</span> depositor.account_number <span class=\"operator\">=</span> account.account_number</span><br><span class=\"line\">      <span class=\"keyword\">WHERE</span> loan.loan_number <span class=\"operator\">=</span> borrower.loan_number</span><br><span class=\"line\">      <span class=\"keyword\">AND</span> account.balance <span class=\"operator\">&gt;=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></h2>\n<h2 id=\"静态完整性约束-static-integrity-constraints\"><a class=\"anchor\" href=\"#静态完整性约束-static-integrity-constraints\">#</a> 静态完整性约束 (Static Integrity Constraints)</h2>\n<p>静态完整性约束是指对数据库在某一时刻的状态进行限制，确保每个时刻的数据都是合法的、符合规则的。它们定义了每个合法的数据库状态必须满足的条件。如果数据库状态违反了这些约束，则被视为非法操作。以下是主要的静态完整性约束类型。</p>\n<h3 id=\"1-域约束-domain-constraints\"><a class=\"anchor\" href=\"#1-域约束-domain-constraints\">#</a> 1. 域约束 (Domain Constraints)</h3>\n<p><strong>域约束</strong>确保每个列的值符合预定义的数据类型和范围。例如，一个人的年龄应该是正整数，不能为负值或超出合理范围。</p>\n<p>示例：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student (</span><br><span class=\"line\">    student_id <span class=\"type\">INTEGER</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    name <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">    age <span class=\"type\">INTEGER</span> <span class=\"keyword\">CHECK</span> (age <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>在此表中， <code>age</code>  列通过  <code>CHECK</code>  约束，确保所有插入的值都必须为非负整数。</p>\n<h3 id=\"2-键约束-key-constraints\"><a class=\"anchor\" href=\"#2-键约束-key-constraints\">#</a> 2. 键约束 (Key Constraints)</h3>\n<p>键约束确保数据库中某些列的值在表内是唯一的，用来唯一标识记录。主要包括以下几种：</p>\n<h4 id=\"21-主键约束-primary-key-constraint\"><a class=\"anchor\" href=\"#21-主键约束-primary-key-constraint\">#</a> 2.1 主键约束 (Primary Key Constraint)</h4>\n<p><strong>主键 (Primary Key)</strong> 是数据库中用于唯一标识表中每一行的列（或列的组合）。主键的值不能重复，也不能为空 ( <code>NULL</code> )。</p>\n<p>示例：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student (</span><br><span class=\"line\">    student_id <span class=\"type\">INTEGER</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    name <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">    age <span class=\"type\">INTEGER</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>在此示例中， <code>student_id</code>  是主键，保证每个学生都有唯一的  <code>student_id</code> 。</p>\n<h4 id=\"22-唯一约束-unique-constraint\"><a class=\"anchor\" href=\"#22-唯一约束-unique-constraint\">#</a> 2.2 唯一约束 (Unique Constraint)</h4>\n<p><strong>唯一约束 (Unique)</strong> 确保列中的所有值都是唯一的，但允许  <code>NULL</code>  值。与主键不同，一个表可以有多个唯一约束。</p>\n<p>示例：</p>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student (</span><br><span class=\"line\">    student_id <span class=\"type\">INTEGER</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    email <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">UNIQUE</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>此示例中， <code>email</code>  列上的唯一约束确保每个学生的电子邮件地址都是唯一的。</p>\n<h3 id=\"3-外键约束-foreign-key-constraints\"><a class=\"anchor\" href=\"#3-外键约束-foreign-key-constraints\">#</a> 3. 外键约束 (Foreign Key Constraints)</h3>\n<p><strong>外键约束 (Foreign Key)</strong> 用于确保两个表之间的参照完整性。它保证一个表中的值必须在另一个表中存在。</p>\n<p>示例：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student (</span><br><span class=\"line\">    student_id <span class=\"type\">INTEGER</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    name <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Enrollment (</span><br><span class=\"line\">    enrollment_id <span class=\"type\">INTEGER</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    student_id <span class=\"type\">INTEGER</span>,</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> KEY (student_id) <span class=\"keyword\">REFERENCES</span> Student(student_id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><br>\n 在此示例中， <code>Enrollment</code>  表中的  <code>student_id</code>  是一个外键，引用  <code>Student</code>  表中的  <code>student_id</code> 。这确保了每个注册记录中的  <code>student_id</code>  都必须存在于  <code>Student</code>  表中。</p>\n<h3 id=\"4-检查约束-check-constraints\"><a class=\"anchor\" href=\"#4-检查约束-check-constraints\">#</a> 4. 检查约束 (Check Constraints)</h3>\n<p><strong>检查约束 (Check)</strong> 用于指定列的值必须满足的条件。它们提供了一种强制执行复杂条件的机制。</p>\n<p>示例：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Student (</span><br><span class=\"line\">    student_id <span class=\"type\">INTEGER</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    name <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">    age <span class=\"type\">INTEGER</span> <span class=\"keyword\">CHECK</span> (age <span class=\"operator\">&gt;=</span> <span class=\"number\">18</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>此示例中， <code>age</code>  列的值必须大于等于 18，确保插入的学生必须年满 18 岁。</p>\n<h3 id=\"5-语义约束-semantic-integrity-constraints\"><a class=\"anchor\" href=\"#5-语义约束-semantic-integrity-constraints\">#</a> 5. 语义约束 (Semantic Integrity Constraints)</h3>\n<p><strong>语义约束 (Semantic Constraints)</strong> 是对数据逻辑含义的约束，确保数据的有效性和一致性。它们通常涉及特定领域的业务逻辑规则。</p>\n<p>示例：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Employee (</span><br><span class=\"line\">    emp_id <span class=\"type\">INTEGER</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    name <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">    hire_date <span class=\"type\">DATE</span>,</span><br><span class=\"line\">    birth_date <span class=\"type\">DATE</span>,</span><br><span class=\"line\">    <span class=\"keyword\">CHECK</span> (hire_date <span class=\"operator\">&gt;</span> birth_date)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中， <code>hire_date</code>  必须晚于  <code>birth_date</code> ，确保员工的入职日期必须在他们的出生日期之后。</p>\n<h3 id=\"6为已经创建好的表添加约束\"><a class=\"anchor\" href=\"#6为已经创建好的表添加约束\">#</a> 6. 为已经创建好的表添加约束</h3>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 添加约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 表名 <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> 约束名 类型 (列名);</span><br><span class=\"line\"><span class=\"comment\">-- 删除约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 表名 <span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> 约束名;</span><br><span class=\"line\"><span class=\"comment\">-- 添加主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 表名 <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> 约束名 <span class=\"keyword\">PRIMARY</span> KEY (列名);</span><br><span class=\"line\"><span class=\"comment\">-- 添加外键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 表名 <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> 约束名 <span class=\"keyword\">FOREIGN</span> KEY (列名) <span class=\"keyword\">REFERENCES</span> 参考表 (参考列);</span><br><span class=\"line\"><span class=\"comment\">-- 添加唯一（unique)</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 表名 <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> 约束名 <span class=\"keyword\">UNIQUE</span> (列名);</span><br><span class=\"line\"><span class=\"comment\">-- 命名约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Students <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> unique_email <span class=\"keyword\">UNIQUE</span> (email);</span><br><span class=\"line\"><span class=\"comment\">-- 删除已经命名的约束</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Students <span class=\"keyword\">DROP</span> <span class=\"keyword\">CONSTRAINT</span> unique_email;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 举例</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> Lecture <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span> ClassroomConflict </span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span>(classroomId, semester, <span class=\"keyword\">year</span>, classTime);</span><br><span class=\"line\"><span class=\"comment\">-- 唯一的一个集合</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"动态完整性约束dynamic-integrity-constraints\"><a class=\"anchor\" href=\"#动态完整性约束dynamic-integrity-constraints\">#</a> 动态完整性约束（Dynamic Integrity Constraints）</h2>\n<p>动态完整性约束的目标是在数据发生变化时确保其合法性。这类约束在数据库的插入、更新、删除等操作后执行，以确保数据的完整性。它们常用于以下场景：</p>\n<ul>\n<li>维护复杂的业务规则</li>\n<li>确保数据的有效性</li>\n<li>在特定事件发生时，自动执行相应的操作</li>\n</ul>\n<h3 id=\"1-触发器triggers\"><a class=\"anchor\" href=\"#1-触发器triggers\">#</a> 1. 触发器（Triggers）</h3>\n<p>触发器是数据库中的一种机制，它可以在某些事件发生时（例如插入、更新或删除数据时）自动执行定义好的操作。触发器用于实现动态完整性约束，是动态约束的典型实现方式。</p>\n<h4 id=\"11-触发器的组成部分\"><a class=\"anchor\" href=\"#11-触发器的组成部分\">#</a> 1.1 触发器的组成部分：</h4>\n<ul>\n<li><strong>事件（Event）</strong>：触发器是基于特定事件触发的，常见的事件有  <code>INSERT</code> 、 <code>UPDATE</code>  和  <code>DELETE</code>  操作。</li>\n<li><strong>时机（Timing）</strong>：触发器可以在事件发生之前（ <code>BEFORE</code> ）或之后（ <code>AFTER</code> ）执行。</li>\n<li><strong>操作（Action）</strong>：当触发器被触发时，执行的 SQL 语句或函数。</li>\n<li><strong>作用范围（Scope）</strong>：触发器可以设置为针对每一行（ <code>FOR EACH ROW</code> ）或针对整个语句（ <code>FOR EACH STATEMENT</code> ）。</li>\n</ul>\n<h4 id=\"12-触发器的基本语法以-postgresql-为例\"><a class=\"anchor\" href=\"#12-触发器的基本语法以-postgresql-为例\">#</a> 1.2 触发器的基本语法（以 PostgreSQL 为例）：</h4>\n<p><figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> trigger_name</span><br><span class=\"line\">&#123; BEFORE <span class=\"operator\">|</span> AFTER &#125; &#123; <span class=\"keyword\">INSERT</span> <span class=\"operator\">|</span> <span class=\"keyword\">UPDATE</span> <span class=\"operator\">|</span> <span class=\"keyword\">DELETE</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">EXECUTE</span> <span class=\"keyword\">FUNCTION</span> function_name();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"13-触发器的示例\"><a class=\"anchor\" href=\"#13-触发器的示例\">#</a> 1.3 触发器的示例：</h4>\n<p>以下示例演示了如何在员工表中使用触发器来检查员工的工资是否在合理范围内（大于 0 且小于 100,000）：</p>\n<ol>\n<li><strong>创建触发器函数</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">FUNCTION</span> check_salary() <span class=\"keyword\">RETURNS</span> <span class=\"keyword\">TRIGGER</span> <span class=\"keyword\">AS</span> $$</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    IF NEW.salary <span class=\"operator\">&lt;</span> <span class=\"number\">0</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">        RAISE EXCEPTION <span class=\"string\">&#x27;工资不能为负&#x27;</span>;</span><br><span class=\"line\">    ELSIF NEW.salary <span class=\"operator\">&gt;</span> <span class=\"number\">100000</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">        RAISE EXCEPTION <span class=\"string\">&#x27;工资超出上限&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">    <span class=\"keyword\">RETURN</span> <span class=\"keyword\">NEW</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\">$$ <span class=\"keyword\">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>\n<p>触发器函数语法介绍：<br>\n函数介绍</p>\n</li>\n<li>\n<p><strong> <code>CREATE OR REPLACE FUNCTION</code> </strong></p>\n<ul>\n<li>这是 PostgreSQL 中用于创建或替换（更新）一个函数的语法。</li>\n<li><strong> <code>CREATE</code> </strong> 表示创建一个新的函数。</li>\n<li><strong> <code>OR REPLACE</code> </strong> 表示如果同名函数已经存在，那么替换它。这避免了先删除再重新创建函数的麻烦。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>check_salary()</code> </strong></p>\n<ul>\n<li>这是函数的名称和参数部分。在这个例子中，函数名是  <code>check_salary</code> ，括号中为空表示这个函数不接受任何参数。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>RETURNS TRIGGER</code> </strong></p>\n<ul>\n<li><strong> <code>RETURNS</code> </strong> 表示函数的返回类型。</li>\n<li>在这个例子中，返回类型是 <strong> <code>TRIGGER</code> </strong>，意味着这是一个触发器函数，必须返回触发器类型的数据。所有的触发器函数都必须返回  <code>TRIGGER</code>  类型，而不是其他类型（如  <code>INTEGER</code>  或  <code>TEXT</code> ）。</li>\n<li>触发器函数的返回值通常是  <code>NEW</code>  或  <code>OLD</code> ，表示返回新插入 / 更新的数据行或旧删除 / 更新的数据行。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>AS $$</code> </strong></p>\n<ul>\n<li><strong> <code>AS $$</code> </strong> 是用来定义函数体的部分。 <code>$$</code>  是一个定界符（delimiter），表示函数体的开始和结束。定界符  <code>$$</code>  让函数体内的代码可以包含单引号等特殊字符，而不需要对这些字符进行转义。</li>\n<li>换句话说， <code>$$</code>  包围的是函数的具体逻辑和代码。</li>\n</ul>\n<p>语法介绍</p>\n</li>\n<li>\n<p><strong> <code>NEW</code>  和  <code>OLD</code> </strong></p>\n<ul>\n<li><strong> <code>NEW</code> </strong>：在  <code>INSERT</code>  或  <code>UPDATE</code>  操作中， <code>NEW</code>  包含新插入或更新的数据行。</li>\n<li><strong> <code>OLD</code> </strong>：在  <code>UPDATE</code>  或  <code>DELETE</code>  操作中， <code>OLD</code>  包含被更新或删除的旧数据行。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>TG_OP</code> </strong></p>\n<ul>\n<li>表示触发器触发的操作类型，可以是  <code>'INSERT'</code> 、 <code>'UPDATE'</code> 、 <code>'DELETE'</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>TG_WHEN</code> </strong></p>\n<ul>\n<li>表示触发器是  <code>BEFORE</code>  还是  <code>AFTER</code> 。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>TG_TABLE_NAME</code> </strong></p>\n<ul>\n<li>表示触发器所属的表的名字。</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>TG_NARGS</code>  和  <code>TG_ARGV[]</code> </strong></p>\n<ul>\n<li>用于访问在创建触发器时传递给触发器函数的参数。</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><strong>创建触发器</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> salary_trigger</span><br><span class=\"line\">BEFORE <span class=\"keyword\">INSERT</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> employees</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">EXECUTE</span> <span class=\"keyword\">FUNCTION</span> check_salary();</span><br></pre></td></tr></table></figure><br>\n 在这个例子中，每当试图插入或更新  <code>employees</code>  表时，触发器会调用  <code>check_salary</code>  函数，检查工资的合理性。如果工资不在合法范围内，会抛出异常并阻止该操作。</li>\n</ol>\n<h3 id=\"2-触发器的用途\"><a class=\"anchor\" href=\"#2-触发器的用途\">#</a> 2. 触发器的用途：</h3>\n<p>触发器可以用于以下几种主要场景：</p>\n<h4 id=\"21-数据验证\"><a class=\"anchor\" href=\"#21-数据验证\">#</a> 2.1 数据验证：</h4>\n<p>确保插入或更新的数据满足特定条件，例如值的范围或数据的一致性要求。触发器可以在数据变更之前检查数据是否符合约束条件，避免不合法的数据被插入或更新。</p>\n<h4 id=\"22-自动计算\"><a class=\"anchor\" href=\"#22-自动计算\">#</a> 2.2 自动计算：</h4>\n<p>在插入或更新数据时，自动计算和更新相关字段的值。例如，可以创建一个触发器，在订单被更新时，自动重新计算总价。</p>\n<h4 id=\"23-业务规则的执行\"><a class=\"anchor\" href=\"#23-业务规则的执行\">#</a> 2.3 业务规则的执行：</h4>\n<p>触发器可以帮助实施复杂的业务规则。例如，确保员工的工资不得高于其主管的工资。</p>\n<h4 id=\"24-维护数据完整性\"><a class=\"anchor\" href=\"#24-维护数据完整性\">#</a> 2.4 维护数据完整性：</h4>\n<p>触发器可以用于自动更新或删除与某个表相关的其他表中的数据。例如，使用  <code>ON DELETE CASCADE</code>  可以在删除某条主记录时自动删除所有相关的子记录。</p>\n<h4 id=\"25-审计和日志记录\"><a class=\"anchor\" href=\"#25-审计和日志记录\">#</a> 2.5 审计和日志记录：</h4>\n<p>触发器可以用于跟踪对关键数据的修改，记录修改操作的时间、执行人等信息。例如，每当某个用户数据被修改时，可以记录修改时间和修改内容。</p>\n<h3 id=\"3-触发器的执行时机\"><a class=\"anchor\" href=\"#3-触发器的执行时机\">#</a> 3. 触发器的执行时机：</h3>\n<p>触发器可以配置为在以下几个时机触发：</p>\n<ul>\n<li><strong>BEFORE</strong>：在执行  <code>INSERT</code> 、 <code>UPDATE</code>  或  <code>DELETE</code>  语句之前触发。通常用于验证数据的有效性或在操作之前修改数据。</li>\n<li><strong>AFTER</strong>：在执行  <code>INSERT</code> 、 <code>UPDATE</code>  或  <code>DELETE</code>  语句之后触发。通常用于更新其他表、执行日志记录等。</li>\n</ul>\n<h3 id=\"4-动态完整性约束的示例\"><a class=\"anchor\" href=\"#4-动态完整性约束的示例\">#</a> 4. 动态完整性约束的示例：</h3>\n<p>以下是一个动态完整性约束的具体例子，当在  <code>employees</code>  表中插入或更新员工记录时，触发器会检查新插入或更新的工资是否合法：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建触发器函数</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">FUNCTION</span> check_salary() <span class=\"keyword\">RETURNS</span> <span class=\"keyword\">TRIGGER</span> <span class=\"keyword\">AS</span> $$</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    IF NEW.salary <span class=\"operator\">&lt;</span> <span class=\"number\">0</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">        RAISE EXCEPTION <span class=\"string\">&#x27;工资不能为负&#x27;</span>;</span><br><span class=\"line\">    ELSIF NEW.salary <span class=\"operator\">&gt;</span> <span class=\"number\">100000</span> <span class=\"keyword\">THEN</span></span><br><span class=\"line\">        RAISE EXCEPTION <span class=\"string\">&#x27;工资超出上限&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\">    <span class=\"keyword\">RETURN</span> <span class=\"keyword\">NEW</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\">$$ <span class=\"keyword\">LANGUAGE</span> plpgsql;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建触发器</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> salary_trigger</span><br><span class=\"line\">BEFORE <span class=\"keyword\">INSERT</span> <span class=\"keyword\">OR</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> employees</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">EXECUTE</span> <span class=\"keyword\">FUNCTION</span> check_salary();</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中， <code>check_salary</code>  函数定义了工资必须在合理范围内的约束条件。通过  <code>salary_trigger</code>  触发器，每当有新的员工数据被插入或员工数据被更新时，系统会自动检查工资的合法性。如果工资不合法，操作将被阻止。</p>\n<h3 id=\"5-触发器的管理\"><a class=\"anchor\" href=\"#5-触发器的管理\">#</a> 5. 触发器的管理：</h3>\n<ul>\n<li><strong>禁用触发器</strong>：在某些情况下（例如批量数据导入），可能需要临时禁用触发器以提高性能。可以使用以下命令禁用触发器：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employees DISABLE <span class=\"keyword\">TRIGGER</span> salary_trigger;</span><br></pre></td></tr></table></figure></li>\n<li><strong>启用触发器</strong>：执行完批量数据导入后，可以重新启用触发器：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employees ENABLE <span class=\"keyword\">TRIGGER</span> salary_trigger</span><br></pre></td></tr></table></figure></li>\n<li><strong>删除触发器</strong>：如果不再需要某个触发器，可以使用以下命令删除它：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> employees ENABLE <span class=\"keyword\">TRIGGER</span> salary_trigger</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h3>\n<p><strong>动态完整性约束</strong>通过触发器机制来确保数据库在变化过程中的数据完整性和一致性。它们主要用于处理数据库状态改变时的约束条件，维护数据的合法性。触发器在数据库系统中具有强大的功能，能够在数据操作的过程中自动执行验证和维护操作，但使用时也需要谨慎，以避免性能问题或意外的副作用。</p>\n<hr>\n<h2 id=\"处理违规约束\"><a class=\"anchor\" href=\"#处理违规约束\">#</a> 处理违规约束</h2>\n<h3 id=\"1-拒绝操作\"><a class=\"anchor\" href=\"#1-拒绝操作\">#</a> 1. <strong>拒绝操作</strong></h3>\n<ul>\n<li><strong>定义</strong>：当数据库中的某个操作违反了完整性约束时，最常见的处理方式就是<strong>拒绝执行该操作</strong>。这种方式直接阻止违反约束的插入、更新或删除操作，从而确保数据的完整性。</li>\n<li><strong>场景</strong>：\n<ul>\n<li>插入一条记录时，如果它违反了唯一约束或主键约束，数据库将拒绝该插入操作。</li>\n<li>更新某列数据时，如果更新后的值不符合  <code>CHECK</code>  约束条件（例如超过了规定的范围），则数据库会拒绝该更新操作。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Student (student_id, age) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">-5</span>);</span><br></pre></td></tr></table></figure><br>\n 如果  <code>age</code>  列的  <code>CHECK</code>  约束是年龄必须大于 0，则插入负年龄的操作会被拒绝。</li>\n</ul>\n<h3 id=\"2-回滚事务\"><a class=\"anchor\" href=\"#2-回滚事务\">#</a> 2. <strong>回滚事务</strong></h3>\n<ul>\n<li><strong>定义</strong>：如果在一个事务中有任何操作违反了完整性约束，整个事务将会被<strong>回滚</strong>。回滚意味着撤销事务中的所有操作，使数据库返回到事务开始之前的状态。</li>\n<li><strong>场景</strong>：\n<ul>\n<li>一个事务中包含多个操作，如果其中任意一个操作违反了完整性约束，所有操作都将被撤销。这样做可以确保数据库不会因为部分执行成功而陷入不一致的状态。</li>\n</ul>\n</li>\n<li><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入一条记录</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Accounts (account_id, balance) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 尝试更新一条违反约束的记录</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> Accounts <span class=\"keyword\">SET</span> balance <span class=\"operator\">=</span> <span class=\"number\">-200</span> <span class=\"keyword\">WHERE</span> account_id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 如果更新违反了 CHECK 约束，回滚整个事务</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><br>\n 在此示例中， <code>balance</code>  列可能有一个  <code>CHECK</code>  约束，要求余额不能为负数。如果  <code>UPDATE</code>  语句违反了该约束，整个事务会回滚， <code>INSERT</code>  操作也会被撤销。</li>\n</ul>\n<h3 id=\"3-执行维护操作\"><a class=\"anchor\" href=\"#3-执行维护操作\">#</a> 3. <strong>执行 “维护” 操作</strong></h3>\n<ul>\n<li>\n<p><strong>定义</strong>：当约束被违反时，数据库可以自动执行某些<strong>维护操作</strong>，以恢复数据库到合法状态。这种方式常见于外键约束和级联操作（Cascading Actions）。</p>\n</li>\n<li>\n<p><strong>场景</strong>：</p>\n<ul>\n<li>当删除父表中的记录时，如果该记录被子表引用，外键约束可能会被违反。在这种情况下，数据库可以通过<strong>级联删除</strong>或<strong>级联更新</strong>来维护数据一致性。</li>\n<li>另一种维护操作是将相关外键字段设置为  <code>NULL</code>  或默认值，以避免参照完整性约束被违反。</li>\n</ul>\n</li>\n<li>\n<p><strong>维护操作类型</strong>：</p>\n<ul>\n<li><strong>ON DELETE CASCADE</strong>：删除父表记录时，自动删除子表中所有引用该记录的行。</li>\n<li><strong>ON UPDATE CASCADE</strong>：当父表中关键字段被更新时，自动更新子表中所有相关的外键字段。</li>\n<li><strong>ON DELETE/UPDATE SET NULL</strong>：当父表记录被删除或更新时，子表的外键列被设置为  <code>NULL</code> 。</li>\n<li><strong>ON DELETE/UPDATE SET DEFAULT</strong>：当父表记录被删除或更新时，子表的外键列被设置为默认值。</li>\n</ul>\n</li>\n<li>\n<p><strong>示例</strong>：<br>\n<figure class=\"highlight sql\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Orders (</span><br><span class=\"line\">    order_id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    customer_id <span class=\"type\">INT</span>,</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> KEY (customer_id) <span class=\"keyword\">REFERENCES</span> Customers(customer_id)</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> CASCADE</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><br>\n 在这个示例中，如果  <code>Customers</code>  表中的某个客户记录被删除，则  <code>Orders</code>  表中所有引用该客户的订单记录也会自动被删除。</p>\n</li>\n</ul>\n<h3 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h3>\n<ul>\n<li><strong>拒绝操作</strong>：直接阻止违反约束的插入、更新或删除操作。</li>\n<li><strong>回滚事务</strong>：如果事务中的任何操作违反约束，整个事务都会被撤销。</li>\n<li><strong>执行维护操作</strong>：通过设置级联操作或将外键字段设置为  <code>NULL</code>  或默认值，自动维护数据库的完整性。</li>\n</ul>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "http://example.com/2024/09/16/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/",
            "url": "http://example.com/2024/09/16/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/",
            "title": "基础操作",
            "date_published": "2024-09-16T09:39:52.951Z",
            "content_html": "<h1 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h1>\n<p><span class=\"label warning\">1</span><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># H1</span><br><span class=\"line\">## H2</span><br><span class=\"line\">### H3</span><br><span class=\"line\">#### H4</span><br><span class=\"line\">##### H5</span><br><span class=\"line\">###### H6</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, for H1 and H2, an underline-ish style:</span><br><span class=\"line\"></span><br><span class=\"line\">Alt-H1</span><br><span class=\"line\">======</span><br><span class=\"line\"></span><br><span class=\"line\">Alt-H2</span><br><span class=\"line\">------</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"h1\"><a class=\"anchor\" href=\"#h1\">#</a> H1</h1>\n<h2 id=\"h2\"><a class=\"anchor\" href=\"#h2\">#</a> H2</h2>\n<h3 id=\"h3\"><a class=\"anchor\" href=\"#h3\">#</a> H3</h3>\n<h4 id=\"h4\"><a class=\"anchor\" href=\"#h4\">#</a> H4</h4>\n<h5 id=\"h5\"><a class=\"anchor\" href=\"#h5\">#</a> H5</h5>\n<h6 id=\"h6\"><a class=\"anchor\" href=\"#h6\">#</a> H6</h6>\n<p>Alternatively, for H1 and H2, an underline-ish style:</p>\n<h1 id=\"alt-h1\"><a class=\"anchor\" href=\"#alt-h1\">#</a> Alt-H1</h1>\n<h2 id=\"alt-h2\"><a class=\"anchor\" href=\"#alt-h2\">#</a> Alt-H2</h2>\n<h3 id=\"md文档开头标签\"><a class=\"anchor\" href=\"#md文档开头标签\">#</a> md 文档开头标签</h3>\n<p><figure class=\"highlight md\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 置顶文章 #文章标题</span><br><span class=\"line\">date: 文章发布是年/月/日 时/分/秒 #时间</span><br><span class=\"line\">sticky: true #是否置顶</span><br><span class=\"line\">categories: # 文章分类</span><br><span class=\"line\"><span class=\"bullet\">-</span> [计算机科学, Java, 零基础学Java语言-浙江大学-翁恺]</span><br><span class=\"line\">cover: http://placehold.it/350x150.jpg #文章封面</span><br><span class=\"line\">tags: #标签</span><br><span class=\"line\">description： #简介</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建文件\"><a class=\"anchor\" href=\"#创建文件\">#</a> 创建文件</h3>\n<p><figure class=\"highlight bash\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new new-project</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动本地服务\"><a class=\"anchor\" href=\"#启动本地服务\">#</a> 启动本地服务</h3>\n<p><figure class=\"highlight bash\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n<h2 id=\"常用\"><a class=\"anchor\" href=\"#常用\">#</a> 常用</h2>\n<h3 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a>  <code>代码块</code></h3>\n<p><figure class=\"highlight md\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">&amp;#96;</span><span class=\"literal\">&amp;#96;</span><span class=\"literal\">&amp;#96;</span>java 行高亮 https://shoka.lostyu.me 参考链接 mark:1,6-7</span><br><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\">...</span><br><span class=\"line\">Scanner in = new Scanner (System.in);</span><br><span class=\"line\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println (in.nextLine ());</span><br><span class=\"line\">System.out.println (&quot;Hello&quot; + &quot;world.&quot;);</span><br><span class=\"line\"><span class=\"literal\">&amp;#96;</span><span class=\"literal\">&amp;#96;</span><span class=\"literal\">&amp;#96;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">&amp;#96;</span><span class=\"literal\">&amp;#96;</span><span class=\"literal\">&amp;#96;</span>bash 命令行提示符 command:(&quot;[root@localhost] $&quot;:1,9-10||&quot;[admin@remotehost] #&quot;:4-6)</span><br><span class=\"line\">pwd</span><br><span class=\"line\">/usr/home/chris/bin</span><br><span class=\"line\">ls -la</span><br><span class=\"line\">total 2</span><br><span class=\"line\">drwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .</span><br><span class=\"line\">drwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..</span><br><span class=\"line\">-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup</span><br><span class=\"line\">-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;update&quot;</span><br><span class=\"line\">git push</span><br><span class=\"line\"><span class=\"literal\">&amp;#96;</span><span class=\"literal\">&amp;#96;</span><span class=\"literal\">&amp;#96;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><figcaption><span>行高亮</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">参考链接 mark:1,6-7</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span> (System.in);</span><br><span class=\"line\"><span class=\"comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println (in.nextLine ());</span><br><span class=\"line\">System.out.println (<span class=\"string\">&quot;Hello&quot;</span> + <span class=\"string\">&quot;world.&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><figcaption><span>命令行提示符 command:(\"[root@localhost] $\":1,9-10||\"[admin@remotehost] #\":4-6)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\">/usr/home/chris/bin</span><br><span class=\"line\"><span class=\"built_in\">ls</span> -la</span><br><span class=\"line\">total 2</span><br><span class=\"line\">drwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .</span><br><span class=\"line\">drwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..</span><br><span class=\"line\">-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup</span><br><span class=\"line\">-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;update&quot;</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"note-提醒块\"><a class=\"anchor\" href=\"#note-提醒块\">#</a>  <code>note</code>  提醒块</h3>\n<ul>\n<li>111</li>\n</ul>\n<hr>\n<p><figure class=\"highlight markdown\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:::default</span><br><span class=\"line\">默认默认</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\">:::primary</span><br><span class=\"line\">基本基本</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\">:::info</span><br><span class=\"line\">提示提示</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\">:::success</span><br><span class=\"line\">成功成功</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\">:::warning</span><br><span class=\"line\">警告警告</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\">:::danger</span><br><span class=\"line\">危险危险</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\">:::danger no-icon</span><br><span class=\"line\">危险危险</span><br><span class=\"line\">:::</span><br></pre></td></tr></table></figure></p>\n<div class=\"note default\">\n<p>默认默认</p>\n</div>\n<div class=\"note primary\">\n<p>基本基本</p>\n</div>\n<div class=\"note info\">\n<p>提示提示</p>\n</div>\n<div class=\"note success\">\n<p>成功成功</p>\n</div>\n<div class=\"note warning\">\n<p>警告警告</p>\n</div>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<div class=\"note danger no-icon\">\n<p>危险危险</p>\n</div>\n<h2 id=\"label标签块\"><a class=\"anchor\" href=\"#label标签块\">#</a> label 标签块</h2>\n<hr>\n<p><figure class=\"highlight md\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[default]&#123;.label&#125;</span><br><span class=\"line\">[primary]&#123;.label .primary&#125;</span><br><span class=\"line\">[info]&#123;.label .info&#125;</span><br><span class=\"line\">[:heavy<span class=\"emphasis\">_check_</span>mark:success]&#123;.label .success&#125;</span><br><span class=\"line\">[warning]&#123;.label .warning&#125;</span><br><span class=\"line\">[:broken<span class=\"emphasis\">_heart:danger]&#123;.label .danger&#125;</span></span><br></pre></td></tr></table></figure><br>\n<span class=\"label\">default</span><br>\n<span class=\"label primary\">primary</span><br>\n<span class=\"label info\">info</span><br>\n<span class=\"label success\">✔️success</span><br>\n<span class=\"label warning\">warning</span><br>\n<span class=\"label danger\">💔danger</span></p>\n<h2 id=\"文字特效\"><a class=\"anchor\" href=\"#文字特效\">#</a> 文字特效</h2>\n<hr>\n<p><figure class=\"highlight md\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">++下划线++</span><br><span class=\"line\">++波浪线++&#123;.wavy&#125;</span><br><span class=\"line\">++着重点++&#123;.dot&#125;</span><br><span class=\"line\">++紫色下划线++&#123;.primary&#125;</span><br><span class=\"line\">++绿色波浪线++&#123;.wavy .success&#125;</span><br><span class=\"line\">++黄色着重点++&#123;.dot .warning&#125;</span><br><span class=\"line\">~~删除线～～</span><br><span class=\"line\">~~红色删除线～～&#123;.danger&#125;</span><br><span class=\"line\">==荧光高亮==</span><br><span class=\"line\">[赤橙黄绿青蓝紫]&#123;.rainbow&#125;</span><br><span class=\"line\">[红色]&#123;.red&#125;</span><br><span class=\"line\">[粉色]&#123;.pink&#125;</span><br><span class=\"line\">[橙色]&#123;.orange&#125;</span><br><span class=\"line\">[黄色]&#123;.yellow&#125;</span><br><span class=\"line\">[绿色]&#123;.green&#125;</span><br><span class=\"line\">[靛青]&#123;.aqua&#125;</span><br><span class=\"line\">[蓝色]&#123;.blue&#125;</span><br><span class=\"line\">[紫色]&#123;.purple&#125;</span><br><span class=\"line\">[灰色]&#123;.grey&#125;</span><br><span class=\"line\">快捷键 [Ctrl]&#123;.kbd&#125; + [C]&#123;.kbd .red&#125;</span><br><span class=\"line\">H~2~0</span><br><span class=\"line\">29^th^</span><br></pre></td></tr></table></figure></p>\n<p><ins>下划线</ins><br>\n<ins class=\"wavy\">波浪线</ins><br>\n<ins class=\"dot\">着重点</ins><br>\n<ins class=\"primary\">紫色下划线</ins><br>\n<ins class=\"wavy success\">绿色波浪线</ins><br>\n<ins class=\"dot warning\">黄色着重点</ins><br>\n～～删除线～～<br>\n~~ <s class=\"danger\">红色删除线</s><br>\n<mark>荧光高亮</mark><br>\n<span class=\"rainbow\">赤橙黄绿青蓝紫</span><br>\n<span class=\"red\">红色</span><br>\n<span class=\"pink\">粉色</span><br>\n<span class=\"orange\">橙色</span><br>\n<span class=\"yellow\">黄色</span><br>\n<span class=\"green\">绿色</span><br>\n<span class=\"aqua\">靛青</span><br>\n<span class=\"blue\">蓝色</span><br>\n<span class=\"purple\">紫色</span><br>\n<span class=\"grey\">灰色</span><br>\n快捷键 <span class=\"kbd\">Ctrl</span> + <span class=\"kbd red\">C</span><br>\nH<sub>2</sub>0<br>\n29<sup>th</sup></p>\n<h2 id=\"collapse-折叠块\"><a class=\"anchor\" href=\"#collapse-折叠块\">#</a> collapse 折叠块</h2>\n<hr>\n<p><figure class=\"highlight md\"><figcaption><span>row</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++ 默认默认 这里是一段文字</span><br><span class=\"line\">++ 下划线 ++</span><br><span class=\"line\">+++</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+++primary 紫色</span><br><span class=\"line\">:::info</span><br><span class=\"line\">参考信息</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一行</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二行</span><br><span class=\"line\">+++</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+++info  蓝色</span><br><span class=\"line\">;;;id3 卡片 1</span><br><span class=\"line\">这里是卡片 1 的内容</span><br><span class=\"line\">;;;</span><br><span class=\"line\"></span><br><span class=\"line\">;;;id3 卡片 2</span><br><span class=\"line\">这里是卡片 2 的内容</span><br><span class=\"line\">;;;</span><br><span class=\"line\">+++</span><br><span class=\"line\"></span><br><span class=\"line\">+++success 绿色</span><br><span class=\"line\">&#123;% links %&#125;</span><br><span class=\"line\"><span class=\"bullet\">-</span> site: 優萌初華</span><br><span class=\"line\">  url: https://shoka.lostyu.me</span><br><span class=\"line\">  color: &quot;#e9546b&quot;</span><br><span class=\"line\">&#123;% endlinks %&#125;</span><br><span class=\"line\">+++</span><br><span class=\"line\"></span><br><span class=\"line\">+++warning 黄色</span><br><span class=\"line\">!! 警告警告警告警告警告！！&#123;.bulr&#125;</span><br><span class=\"line\">[label]&#123;.label .success&#125;</span><br><span class=\"line\">+++</span><br><span class=\"line\"></span><br><span class=\"line\">+++danger 红色</span><br><span class=\"line\">[danger]&#123;.label .danger&#125;</span><br><span class=\"line\">+++</span><br></pre></td></tr></table></figure></p>\n<details><summary>默认默认 这里是一段文字</summary><div>\n<p>++ 下划线 ++</p>\n</div></details>\n<details class=\"primary\"><summary>紫色</summary><div>\n<div class=\"note info\">\n<p>参考信息</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div></details>\n<details class=\"info\"><summary>蓝色</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片 1\">\n<p>这里是卡片 1 的内容</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片 2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n</div></details>\n<details class=\"success\"><summary>绿色</summary><div>\n<p><div class=\"links\"><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div></div></p>\n</div></details>\n<details class=\"warning\"><summary>黄色</summary><div>\n<p>!! 警告警告警告警告警告！！{.bulr}<br>\n<span class=\"label success\">label</span></p>\n</div></details>\n<details class=\"danger\"><summary>红色</summary><div>\n<p><span class=\"label danger\">danger</span></p>\n</div></details>\n<p><img data-src=\"https://blog-1321157486.cos.ap-nanjing.myqcloud.com/database/cover_1.jpg\" alt=\"图片描述\"></p>\n",
            "tags": []
        }
    ]
}